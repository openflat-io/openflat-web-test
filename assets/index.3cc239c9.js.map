{"version":3,"file":"index.3cc239c9.js","sources":["../../../../node_modules/.pnpm/date-fns@2.29.3/node_modules/date-fns/esm/roundToNearestMinutes/index.js","../../../../packages/flat-pages/src/UserScheduledPage/index.tsx"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * @param {Date|Number} date - the date to round\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.nearestTo=1] - nearest number of minutes to round to. E.g. `15` to round to quarter hours.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Date} the new date rounded to the closest minute\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.nearestTo` must be between 1 and 30\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:07:30 to nearest quarter hour:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * // rounds up because given date is exactly between 12:00:00 and 12:15:00\n * //=> Thu Jul 10 2014 12:15:00\n */\n\nexport default function roundToNearestMinutes(dirtyDate, options) {\n  var _options$nearestTo;\n\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only none provided present');\n  }\n\n  var nearestTo = toInteger((_options$nearestTo = options === null || options === void 0 ? void 0 : options.nearestTo) !== null && _options$nearestTo !== void 0 ? _options$nearestTo : 1);\n\n  if (nearestTo < 1 || nearestTo > 30) {\n    throw new RangeError('`options.nearestTo` must be between 1 and 30');\n  }\n\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds(); // relevant if nearestTo is 1, which is the default case\n\n  var minutes = date.getMinutes() + seconds / 60;\n  var roundingMethod = getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod);\n  var roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n  var remainderMinutes = minutes % nearestTo;\n  var addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), roundedMinutes + addedMinutes);\n}","import React, { useContext, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { isBefore, addMinutes, roundToNearestMinutes, getDay, addWeeks } from \"date-fns\";\nimport { EditRoomFormValues } from \"flat-components\";\nimport { useTranslate } from \"@netless/flat-i18n\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { RoomType } from \"@netless/flat-server-api\";\nimport {\n    PreferencesStoreContext,\n    GlobalStoreContext,\n    RoomStoreContext,\n} from \"../components/StoreProvider\";\nimport { useSafePromise } from \"../utils/hooks/lifecycle\";\nimport EditRoomPage from \"../components/EditRoomPage\";\nimport { errorTips } from \"flat-components\";\nimport { useLoginCheck } from \"../utils/use-login-check\";\n\nconst getInitialBeginTime = (): Date => {\n    const now = new Date();\n    let time = roundToNearestMinutes(now, { nearestTo: 30 });\n    if (isBefore(time, now)) {\n        time = addMinutes(time, 30);\n    }\n    time.setSeconds(0);\n    time.setMilliseconds(0);\n    return time;\n};\n\nexport const UserScheduledPage = observer(function UserScheduledPage() {\n    useLoginCheck();\n    const t = useTranslate();\n    const history = useHistory();\n    const sp = useSafePromise();\n    const roomStore = useContext(RoomStoreContext);\n    const globalStore = useContext(GlobalStoreContext);\n    const preferencesStore = useContext(PreferencesStoreContext);\n    const [isLoading, setLoading] = useState(false);\n\n    const [defaultValues] = useState<EditRoomFormValues>(() => {\n        const scheduleBeginTime = getInitialBeginTime();\n        return {\n            title: globalStore.userInfo?.name\n                ? t(\"schedule-room-default-title\", { name: globalStore.userInfo.name })\n                : \"\",\n            type: RoomType.BigClass,\n            isPeriodic: false,\n            region: preferencesStore.getRegion(),\n            beginTime: new Date(scheduleBeginTime),\n            endTime: addMinutes(scheduleBeginTime, 30),\n            periodic: {\n                endType: \"rate\",\n                weeks: [getDay(scheduleBeginTime)],\n                rate: 7,\n                endTime: addWeeks(scheduleBeginTime, 6),\n            },\n        };\n    });\n\n    return (\n        <EditRoomPage\n            initialValues={defaultValues}\n            loading={isLoading}\n            type=\"schedule\"\n            onSubmit={createRoom}\n        />\n    );\n\n    async function createRoom(values: EditRoomFormValues): Promise<void> {\n        setLoading(true);\n\n        try {\n            const basePayload = {\n                title: values.title,\n                type: values.type,\n                region: values.region,\n                beginTime: values.beginTime.valueOf(),\n                endTime: values.endTime.valueOf(),\n            };\n\n            if (values.isPeriodic) {\n                await sp(\n                    roomStore.createPeriodicRoom({\n                        ...basePayload,\n                        periodic:\n                            values.periodic.endType === \"rate\"\n                                ? {\n                                      weeks: values.periodic.weeks,\n                                      rate: values.periodic.rate,\n                                  }\n                                : {\n                                      weeks: values.periodic.weeks,\n                                      endTime: values.periodic.endTime.valueOf(),\n                                  },\n                    }),\n                );\n            } else {\n                await sp(roomStore.createOrdinaryRoom(basePayload));\n            }\n\n            history.goBack();\n        } catch (e) {\n            console.error(e);\n            errorTips(e);\n            setLoading(false);\n        }\n    }\n});\n\nexport default UserScheduledPage;\n"],"names":["roundToNearestMinutes","dirtyDate","options","_options$nearestTo","nearestTo","toInteger","date","toDate","seconds","minutes","roundingMethod","getRoundingMethod","roundedMinutes","remainderMinutes","addedMinutes","getInitialBeginTime","now","Date","time","isBefore","addMinutes","setSeconds","setMilliseconds","UserScheduledPage","observer","useLoginCheck","t","useTranslate","history","useHistory","sp","useSafePromise","roomStore","useContext","RoomStoreContext","globalStore","GlobalStoreContext","preferencesStore","PreferencesStoreContext","isLoading","setLoading","useState","defaultValues","scheduleBeginTime","title","userInfo","name","type","RoomType","BigClass","isPeriodic","region","getRegion","beginTime","endTime","periodic","endType","weeks","getDay","rate","addWeeks","EditRoomPage","createRoom","values","basePayload","valueOf","createPeriodicRoom","createOrdinaryRoom","goBack","e","console","error","errorTips"],"mappings":"8WAgCe,SAASA,EAAsBC,EAAWC,EAAS,CAChE,IAAIC,EAEJ,GAAI,UAAU,OAAS,EACrB,MAAM,IAAI,UAAU,qDAAqD,EAG3E,IAAIC,EAAYC,GAAWF,EAAqBD,GAAY,KAA6B,OAASA,EAAQ,aAAe,MAAQC,IAAuB,OAASA,EAAqB,CAAC,EAEvL,GAAIC,EAAY,GAAKA,EAAY,GAC/B,MAAM,IAAI,WAAW,8CAA8C,EAGrE,IAAIE,EAAOC,EAAON,CAAS,EACvBO,EAAUF,EAAK,aAEfG,EAAUH,EAAK,WAAU,EAAKE,EAAU,GACxCE,EAAiBC,EAAkBT,GAAY,KAA6B,OAASA,EAAQ,cAAc,EAC3GU,EAAiBF,EAAeD,EAAUL,CAAS,EAAIA,EACvDS,EAAmBJ,EAAUL,EAC7BU,EAAe,KAAK,MAAMD,EAAmBT,CAAS,EAAIA,EAC9D,OAAO,IAAI,KAAKE,EAAK,YAAW,EAAIA,EAAK,SAAU,EAAEA,EAAK,QAAO,EAAIA,EAAK,SAAU,EAAEM,EAAiBE,CAAY,CACrH,CCpCA,MAAMC,EAAsB,IAAY,CAC9BC,MAAAA,EAAM,IAAIC,KACZC,IAAAA,EAAOlB,EAAsBgB,EAAK,CAAEZ,UAAW,EAAA,CAAnB,EAC5Be,OAAAA,EAASD,EAAMF,CAAP,IACDI,EAAAA,EAAWF,EAAM,EAAP,GAErBA,EAAKG,WAAW,CAAhB,EACAH,EAAKI,gBAAgB,CAArB,EACOJ,CACV,EAEYK,EAAoBC,EAAS,UAA6B,CACtDC,IACb,MAAMC,EAAIC,IACJC,EAAUC,IACVC,EAAKC,IACLC,EAAYC,qBAAWC,CAAD,EACtBC,EAAcF,qBAAWG,CAAD,EACxBC,EAAmBJ,qBAAWK,CAAD,EAC7B,CAACC,EAAWC,CAAZ,EAA0BC,mBAAS,EAAD,EAElC,CAACC,CAAD,EAAkBD,EAAAA,QAAAA,SAA6B,IAAM,OACvD,MAAME,EAAoB5B,IACnB,MAAA,CACH6B,OAAOT,EAAAA,EAAYU,WAAZV,MAAAA,EAAsBW,KACvBpB,EAAE,8BAA+B,CAAEoB,KAAMX,EAAYU,SAASC,IAA7D,CAAA,EACD,GACNC,KAAMC,EAASC,SACfC,WAAY,GACZC,OAAQd,EAAiBe,UANtB,EAOHC,UAAW,IAAIpC,KAAK0B,CAAT,EACXW,QAASlC,EAAWuB,EAAmB,EAApB,EACnBY,SAAU,CACNC,QAAS,OACTC,MAAO,CAACC,EAAOf,CAAD,CAAP,EACPgB,KAAM,EACNL,QAASM,EAASjB,EAAmB,CAApB,CAJX,CAAA,CATP,CAFqB,EAoBhC,SACKkB,EAAD,CACI,cAAenB,EACf,QAASH,EACT,KAAK,WACL,SAAUuB,CAAAA,CALlB,EASA,eAAeA,EAAWC,EAA2C,CACjEvB,EAAW,EAAD,EAEN,GAAA,CACA,MAAMwB,EAAc,CAChBpB,MAAOmB,EAAOnB,MACdG,KAAMgB,EAAOhB,KACbI,OAAQY,EAAOZ,OACfE,UAAWU,EAAOV,UAAUY,QAJZ,EAKhBX,QAASS,EAAOT,QAAQW,QAAf,CAAA,EAGTF,EAAOb,WACDpB,MAAAA,EACFE,EAAUkC,mBAAmB,CACzB,GAAGF,EACHT,SACIQ,EAAOR,SAASC,UAAY,OACtB,CACIC,MAAOM,EAAOR,SAASE,MACvBE,KAAMI,EAAOR,SAASI,IAAAA,EAE1B,CACIF,MAAOM,EAAOR,SAASE,MACvBH,QAASS,EAAOR,SAASD,QAAQW,QAAxB,CAFb,CARd,CAAA,CADI,EAgBR,MAAMnC,EAAGE,EAAUmC,mBAAmBH,CAA7B,CAAD,EAGZpC,EAAQwC,OAAR,QACKC,GACLC,QAAQC,MAAMF,CAAd,EACAG,EAAUH,CAAD,EACT7B,EAAW,EAAD,CACb,CACJ,CACJ,CA9EwC"}