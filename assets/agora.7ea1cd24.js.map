{"version":3,"file":"agora.7ea1cd24.js","sources":["../../../../packages/flat-server-api/src/agora.ts"],"sourcesContent":["import { post } from \"./utils\";\n\nexport interface GenerateRTCTokenPayload {\n    roomUUID: string;\n}\n\nexport type GenerateRTCTokenResult = {\n    token: string;\n};\n\nexport async function generateRTCToken(roomUUID: string): Promise<string> {\n    const { token } = await post<GenerateRTCTokenPayload, GenerateRTCTokenResult>(\n        \"agora/token/generate/rtc\",\n        {\n            roomUUID,\n        },\n    );\n    return token;\n}\n\nexport type GenerateRTMTokenPayload = void;\n\nexport type GenerateRTMTokenResult = {\n    token: string;\n};\n\nexport async function generateRTMToken(): Promise<string> {\n    const { token } = await post<GenerateRTMTokenPayload, GenerateRTMTokenResult>(\n        \"agora/token/generate/rtm\",\n        undefined,\n    );\n    return token;\n}\n\nexport interface AgoraCloudRecordParamsBaseType {\n    resourceid: string;\n    mode: \"individual\" | \"mix\" | \"web\";\n}\n\nexport interface AgoraCloudRecordParamsType extends AgoraCloudRecordParamsBaseType {\n    sid: string;\n}\n\nexport interface AgoraCloudRecordAcquireRequestBody {\n    clientRequest: {\n        resourceExpiredHour?: number;\n        scene?: number;\n    };\n}\n\nexport interface AgoraCloudRecordAcquireResponse {\n    resourceId: string;\n}\n\nexport interface CloudRecordAcquirePayload {\n    roomUUID: string;\n    agoraData: AgoraCloudRecordAcquireRequestBody;\n}\n\nexport interface CloudRecordAcquireResult {\n    resourceId: string;\n}\n\nexport function cloudRecordAcquire(\n    payload: CloudRecordAcquirePayload,\n): Promise<CloudRecordAcquireResult> {\n    return post<CloudRecordAcquirePayload, CloudRecordAcquireResult>(\n        \"room/record/agora/acquire\",\n        payload,\n    );\n}\n\n/**\n * @see {@link https://docs.agora.io/en/cloud-recording/cloud_recording_api_rest?platform=RESTful}\n */\nexport interface AgoraCloudRecordStartRequestBody {\n    clientRequest: {\n        recordingConfig?: {\n            /** 0 (messaging*) | 1 (broadcasting) */\n            channelType?: number;\n            /** 0 (audio) | 1 (video) | 2 (both*) */\n            streamTypes?: number;\n            /** 'individual' mode only, 'standard' is recommended */\n            streamMode?: \"default\" | \"standard\" | \"original\";\n            decryptionMode?: number;\n            secret?: string;\n            salt?: string;\n            audioProfile?: number;\n            /** 0 (HD video*) | 1 (small video) */\n            videoStreamType?: number;\n            /** seconds, default 30 */\n            maxIdleTime?: number;\n            /** 'mix' mode only */\n            transcodingConfig?: {\n                width: number;\n                height: number;\n                fps: number;\n                bitrate: number;\n                maxResolutionUid?: string;\n                mixedVideoLayout?: number;\n                backgroundColor?: string;\n                defaultUserBackgroundImage?: string;\n                layoutConfig?: Array<{\n                    uid?: string;\n                    x_axis?: number;\n                    y_axis?: number;\n                    width?: number;\n                    height?: number;\n                    alpha?: number;\n                    render_mode?: number;\n                }>;\n                backgroundConfig?: Array<{\n                    uid: string;\n                    image_url: string;\n                    render_mode?: number;\n                }>;\n            };\n            subscribeVideoUids?: string[];\n            unSubscribeVideoUids?: string[];\n            subscribeAudioUids?: string[];\n            unSubscribeAudioUids?: string[];\n            subscribeUidGroup?: number;\n            privateParams?: any;\n        };\n        recordingFileConfig?: {\n            avFileType?: string[];\n        };\n        snapshotConfig?: {\n            fileType: string[];\n            captureInterval?: number;\n        };\n        extensionServiceConfig?: {\n            extensionServices: Array<{\n                serviceName?: string;\n                errorHandlePolicy?: string;\n                serviceParam?: {\n                    serviceParam: string;\n                    secretKey: string;\n                    regionId: string;\n                    apiData: {\n                        videoData: {\n                            title: string;\n                            description?: string;\n                            coverUrl?: string;\n                            cateId?: string;\n                            tags?: string;\n                            templateGroupId?: string;\n                            userData?: string;\n                            storageLocation?: string;\n                            workflowI?: string;\n                        };\n                    };\n                };\n            }>;\n            apiVersion?: string;\n            errorHandlePolicy?: string;\n        };\n    };\n}\n\nexport interface CloudRecordStartPayload {\n    roomUUID: string;\n    agoraParams: AgoraCloudRecordParamsBaseType;\n    agoraData: AgoraCloudRecordStartRequestBody;\n}\n\nexport interface CloudRecordStartResult {\n    sid: string;\n    resourceId: string;\n}\n\n/** {@link https://docs.agora.io/en/cloud-recording/cloud_recording_api_rest?platform=RESTful} */\nexport function cloudRecordStart(\n    payload: CloudRecordStartPayload,\n): Promise<CloudRecordStartResult> {\n    return post<CloudRecordStartPayload, CloudRecordStartResult>(\n        \"room/record/agora/started\",\n        payload,\n    );\n}\n\nexport interface AgoraCloudRecordQueryResponse<T extends \"string\" | \"json\" | undefined> {\n    sid: string;\n    resourceId: string;\n    serverResponse: {\n        fileListMode?: T;\n        fileList?: T extends \"string\"\n            ? string\n            : T extends undefined\n            ? undefined\n            : Array<{\n                  filename: string;\n                  trackType: \"audio\" | \"video\" | \"audio_and_video\";\n                  uid: string;\n                  mixedAllUser: boolean;\n                  isPlayable: boolean;\n                  sliceStartTime: number;\n              }>;\n        status: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 20;\n        sliceStartTime: string;\n        extensionServiceState: Array<{\n            serviceName: \"aliyun_vod_service\" | \"web_recorder_service\";\n            payload: {\n                state: \"inProgress\" | \"idle\";\n                videoInfo:\n                    | Array<{\n                          fileName: string;\n                          videoId: string;\n                      }>\n                    | Array<{\n                          state: \"inProgress\" | \"idle\" | \"exit\";\n                          fileList: Array<{\n                              fileName: string;\n                              sliceStartTime: string;\n                          }>;\n                      }>;\n            };\n        }>;\n        subServiceStatus: {\n            recordingService:\n                | \"serviceIdle\"\n                | \"serviceStarted\"\n                | \"serviceReady\"\n                | \"serviceInProgress\"\n                | \"serviceCompleted\"\n                | \"servicePartialCompleted\"\n                | \"serviceValidationFailed\"\n                | \"serviceAbnormal\";\n        };\n    };\n}\n\nexport interface CloudRecordQueryPayload {\n    roomUUID: string;\n    agoraParams: AgoraCloudRecordParamsType;\n}\n\nexport type CloudRecordQueryResult = AgoraCloudRecordQueryResponse<\"string\" | \"json\" | undefined>;\n\n/** {@link https://docs.agora.io/en/cloud-recording/restfulapi/#/Cloud%20Recording/query} */\nexport function cloudRecordQuery(\n    payload: CloudRecordQueryPayload,\n): Promise<CloudRecordQueryResult> {\n    return post<CloudRecordQueryPayload, CloudRecordQueryResult>(\n        \"room/record/agora/query\",\n        payload,\n    );\n}\n\nexport interface AgoraCloudRecordLayoutConfigItem {\n    uid?: string;\n    x_axis: number;\n    y_axis: number;\n    width: number;\n    height: number;\n    alpha?: number;\n    render_mode?: number;\n}\n\nexport interface AgoraCloudRecordBackgroundConfigItem {\n    uid: string;\n    image_url: string;\n    render_mode?: number;\n}\n\nexport interface AgoraCloudRecordUpdateLayoutRequestBody {\n    clientRequest?: {\n        maxResolutionUid?: string;\n        mixedVideoLayout?: number;\n        backgroundColor?: string;\n        layoutConfig?: AgoraCloudRecordLayoutConfigItem[];\n        defaultUserBackgroundImage?: string;\n        backgroundConfig?: AgoraCloudRecordBackgroundConfigItem[];\n    };\n}\n\nexport interface CloudRecordUpdateLayoutPayload {\n    roomUUID: string;\n    agoraParams: AgoraCloudRecordParamsType;\n    agoraData: AgoraCloudRecordUpdateLayoutRequestBody;\n}\n\nexport interface CloudRecordUpdateLayoutResult {\n    sid: string;\n    resourceId: string;\n}\n\n/** {@link https://docs.agora.io/en/cloud-recording/restfulapi/#/Cloud%20Recording/updateLayout} */\nexport function cloudRecordUpdateLayout(\n    payload: CloudRecordUpdateLayoutPayload,\n): Promise<CloudRecordUpdateLayoutResult> {\n    return post<CloudRecordUpdateLayoutPayload, CloudRecordUpdateLayoutResult>(\n        \"room/record/agora/update-layout\",\n        payload,\n    );\n}\n\nexport interface CloudRecordStopPayload {\n    roomUUID: string;\n    agoraParams: AgoraCloudRecordParamsType;\n}\n\nexport interface CloudRecordStopResult {\n    sid: string;\n    resourceId: string;\n    serverResponse: {\n        fileListMode?: \"json\";\n        fileList?: Array<{\n            filename: string;\n            trackType: \"audio\" | \"video\" | \"audio_and_video\";\n            uid: string;\n            mixedAllUser: boolean;\n            isPlayable: boolean;\n            sliceStartTime: number;\n        }>;\n        uploadingStatus: \"uploaded\" | \"backuped\" | \"unknown\";\n        extensionServiceState?: {\n            serviceName?: string;\n            payload:\n                | {\n                      uploadingStatus: string;\n                  }\n                | {\n                      state: string;\n                      fileList: {\n                          fileName: string;\n                          sliceStartTime: string;\n                      };\n                  };\n        };\n    };\n}\n\n/** {@link https://docs.agora.io/en/cloud-recording/restfulapi/#/Cloud%20Recording/stop} */\nexport function cloudRecordStop(payload: CloudRecordStopPayload): Promise<CloudRecordStopResult> {\n    return post<CloudRecordStopPayload, CloudRecordStopResult>(\n        \"room/record/agora/stopped\",\n        payload,\n    );\n}\n\nexport interface RTMCensorPayload {\n    text: string;\n}\n\nexport interface RTMCensorResult {\n    valid: boolean;\n}\n\nexport function checkRTMCensor(payload: RTMCensorPayload): Promise<RTMCensorResult> {\n    return post<RTMCensorPayload, RTMCensorResult>(\"agora/rtm/censor\", payload);\n}\n"],"names":["generateRTCToken","roomUUID","token","post","generateRTMToken","cloudRecordAcquire","payload","cloudRecordStart","cloudRecordQuery","cloudRecordUpdateLayout","cloudRecordStop","checkRTMCensor"],"mappings":"wCAUA,eAAsBA,EAAiBC,EAAmC,CAChE,KAAA,CAAE,MAAAC,CAAM,EAAI,MAAMC,EACpB,2BACA,CACI,SAAAF,CACJ,CAAA,EAEG,OAAAC,CACX,CAQA,eAAsBE,GAAoC,CAChD,KAAA,CAAE,MAAAF,CAAM,EAAI,MAAMC,EACpB,2BACA,MAAA,EAEG,OAAAD,CACX,CA+BO,SAASG,EACZC,EACiC,CAC1B,OAAAH,EACH,4BACAG,CAAA,CAER,CAsGO,SAASC,EACZD,EAC+B,CACxB,OAAAH,EACH,4BACAG,CAAA,CAER,CA6DO,SAASE,EACZF,EAC+B,CACxB,OAAAH,EACH,0BACAG,CAAA,CAER,CAyCO,SAASG,EACZH,EACsC,CAC/B,OAAAH,EACH,kCACAG,CAAA,CAER,CAuCO,SAASI,EAAgBJ,EAAiE,CACtF,OAAAH,EACH,4BACAG,CAAA,CAER,CAUO,SAASK,EAAeL,EAAqD,CACzE,OAAAH,EAAwC,mBAAoBG,CAAO,CAC9E"}