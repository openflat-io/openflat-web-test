{"version":3,"file":"index.16d9f2ef.js","sources":["../../../../packages/flat-services/src/services/recording/recording.ts","../../../../node_modules/.pnpm/polly-js@1.8.3/node_modules/polly-js/src/polly.js","../../../../service-providers/agora-cloud-recording/src/constants.ts","../../../../service-providers/agora-cloud-recording/src/cloud-recording.ts"],"sourcesContent":["import type { RoomType } from \"@netless/flat-server-api\";\nimport type { ReadonlyVal } from \"value-enhancer\";\nimport type { IServiceRecordingEvents } from \"./events\";\n\nimport { Remitter } from \"remitter\";\nimport { SideEffectManager } from \"side-effect-manager\";\nimport { IService } from \"../typing\";\n\nexport interface IServiceRecording$Val {\n    readonly isRecording$: ReadonlyVal<boolean>;\n}\n\nexport interface IServiceRecordingJoinRoomConfig {\n    roomID: string;\n    classroomType: RoomType;\n}\n\nexport abstract class IServiceRecording implements IService {\n    public readonly sideEffect = new SideEffectManager();\n\n    public readonly events: IServiceRecordingEvents = new Remitter();\n\n    public abstract readonly $Val: IServiceRecording$Val;\n\n    public abstract readonly roomID: string | null;\n\n    public abstract readonly isRecording: boolean;\n\n    public abstract joinRoom(config: IServiceRecordingJoinRoomConfig): Promise<void>;\n\n    public abstract leaveRoom(): Promise<void>;\n\n    /** Use with try-catch. */\n    public abstract startRecording(): Promise<void>;\n\n    /** Use with try-catch. */\n    public abstract stopRecording(): Promise<void>;\n\n    public abstract updateLayout(users: Array<{ uid: string; avatar: string }>): Promise<void>;\n\n    public async destroy(): Promise<void> {\n        this.events.destroy();\n        this.sideEffect.flushAll();\n    }\n}\n","/**\r\n * Created by maurice on 9/17/2015.\r\n */\r\n\r\n(function (root, factory) {\r\n    if (typeof define === \"function\" && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define([], factory);\r\n    } else if (typeof exports === \"object\") {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like environments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals (root is window)\r\n        root.polly = factory();\r\n    }\r\n})(this, function () {\r\n    \"use strict\";\r\n\r\n    var defaults = {\r\n        delay: 100,\r\n    };\r\n\r\n    function execute(config, cb) {\r\n        var count = 0;\r\n\r\n        while (true) {\r\n            try {\r\n                return cb({ count: count });\r\n            } catch (ex) {\r\n                if (count < config.count && config.handleFn(ex)) {\r\n                    config.loggerFn(ex);\r\n                    count++;\r\n                } else {\r\n                    throw ex;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function executeForPromise(config, cb) {\r\n        var count = 0;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            function execute() {\r\n                var original = cb({ count: count });\r\n\r\n                original.then(\r\n                    function (e) {\r\n                        resolve(e);\r\n                    },\r\n                    function (e) {\r\n                        if (count < config.count && config.handleFn(e)) {\r\n                            config.loggerFn(e);\r\n                            count++;\r\n                            execute();\r\n                        } else {\r\n                            reject(e);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n\r\n            execute();\r\n        });\r\n    }\r\n\r\n    function executeForPromiseWithDelay(config, cb) {\r\n        var count = 0;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            function execute() {\r\n                var original = cb({ count: count });\r\n\r\n                original.then(\r\n                    function (e) {\r\n                        resolve(e);\r\n                    },\r\n                    function (e) {\r\n                        var delay = config.delays.shift();\r\n\r\n                        if (delay && config.handleFn(e)) {\r\n                            config.loggerFn(e);\r\n                            count++;\r\n                            setTimeout(execute, delay);\r\n                        } else {\r\n                            reject(e);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n\r\n            execute();\r\n        });\r\n    }\r\n\r\n    function executeForNode(config, fn, callback) {\r\n        var count = 0;\r\n\r\n        function internalCallback(err, data) {\r\n            if (err && count < config.count && config.handleFn(err)) {\r\n                config.loggerFn(err);\r\n                count++;\r\n                fn(internalCallback, { count: count });\r\n            } else {\r\n                callback(err, data);\r\n            }\r\n        }\r\n\r\n        fn(internalCallback, { count: count });\r\n    }\r\n\r\n    function executeForNodeWithDelay(config, fn, callback) {\r\n        var count = 0;\r\n\r\n        function internalCallback(err, data) {\r\n            var delay = config.delays.shift();\r\n            if (err && delay && config.handleFn(err)) {\r\n                config.loggerFn(err);\r\n                count++;\r\n                setTimeout(function () {\r\n                    fn(internalCallback, { count: count });\r\n                }, delay);\r\n            } else {\r\n                callback(err, data);\r\n            }\r\n        }\r\n\r\n        fn(internalCallback, { count: count });\r\n    }\r\n\r\n    function delayCountToDelays(count) {\r\n        var delays = [],\r\n            delay = defaults.delay;\r\n\r\n        for (var i = 0; i < count; i++) {\r\n            delays.push(delay);\r\n            delay = 2 * delay;\r\n        }\r\n\r\n        return delays;\r\n    }\r\n\r\n    var pollyFn = function () {\r\n        var config = {\r\n            count: 1,\r\n            delays: [defaults.delay],\r\n            handleFn: function () {\r\n                return true;\r\n            },\r\n            loggerFn: function (err) {},\r\n        };\r\n\r\n        return {\r\n            logger: function (loggerFn) {\r\n                if (typeof loggerFn === \"function\") {\r\n                    config.loggerFn = loggerFn;\r\n                }\r\n\r\n                return this;\r\n            },\r\n            handle: function (handleFn) {\r\n                if (typeof handleFn === \"function\") {\r\n                    config.handleFn = handleFn;\r\n                }\r\n\r\n                return this;\r\n            },\r\n            retry: function (count) {\r\n                if (typeof count === \"number\") {\r\n                    config.count = count;\r\n                }\r\n\r\n                return {\r\n                    execute: execute.bind(null, config),\r\n                    executeForPromise: executeForPromise.bind(null, config),\r\n                    executeForNode: executeForNode.bind(null, config),\r\n                };\r\n            },\r\n            waitAndRetry: function (delays) {\r\n                if (typeof delays === \"number\") {\r\n                    delays = delayCountToDelays(delays);\r\n                }\r\n\r\n                if (Array.isArray(delays)) {\r\n                    config.delays = delays;\r\n                }\r\n\r\n                return {\r\n                    executeForPromise: executeForPromiseWithDelay.bind(\r\n                        null,\r\n                        config\r\n                    ),\r\n                    executeForNode: executeForNodeWithDelay.bind(null, config),\r\n                };\r\n            },\r\n        };\r\n    };\r\n    pollyFn.defaults = defaults;\r\n\r\n    return pollyFn;\r\n});\r\n","import {\n    AgoraCloudRecordBackgroundConfigItem,\n    AgoraCloudRecordLayoutConfigItem,\n    AgoraCloudRecordStartRequestBody,\n    AgoraCloudRecordUpdateLayoutRequestBody,\n    RoomType,\n} from \"@netless/flat-server-api\";\n\nexport enum AgoraCloudRecordingChannelType {\n    Communication = 0,\n    Broadcast = 1,\n}\n\nexport const AVATAR_WIDTH = 144;\nexport const AVATAR_HEIGHT = 108;\nexport const MAX_AVATAR_COUNT = 17;\nexport const AVATAR_BAR_WIDTH = AVATAR_WIDTH * MAX_AVATAR_COUNT;\n\n// https://docs.agora.io/cn/cloud-recording/recording_video_profile\nexport type RecordingConfig = AgoraCloudRecordStartRequestBody[\"clientRequest\"][\"recordingConfig\"];\n\n// not used, all use small class config\nexport const BIG_CLASS_RECORDING_CONFIG: RecordingConfig = {\n    channelType: AgoraCloudRecordingChannelType.Broadcast,\n    transcodingConfig: {\n        width: 384,\n        height: 216,\n        fps: 15,\n        bitrate: 280,\n        mixedVideoLayout: 3,\n        backgroundColor: \"#000000\",\n        defaultUserBackgroundImage: process.env.CLOUD_RECORDING_DEFAULT_AVATAR,\n        layoutConfig: [\n            {\n                x_axis: 0,\n                y_axis: 0,\n                width: 1,\n                height: 1,\n                alpha: 1.0,\n                render_mode: 1,\n            },\n            {\n                x_axis: 0.0,\n                y_axis: 0.67,\n                width: 0.33,\n                height: 0.33,\n                alpha: 1.0,\n                render_mode: 1,\n            },\n        ],\n    },\n    maxIdleTime: 60,\n    subscribeUidGroup: 0,\n};\n\nexport const SMALL_CLASS_RECORDING_CONFIG: RecordingConfig = {\n    channelType: AgoraCloudRecordingChannelType.Communication,\n    transcodingConfig: {\n        width: AVATAR_BAR_WIDTH,\n        height: AVATAR_HEIGHT,\n        fps: 15,\n        bitrate: 500,\n        mixedVideoLayout: 3,\n        backgroundColor: \"#FFFFFF\",\n        defaultUserBackgroundImage: process.env.CLOUD_RECORDING_DEFAULT_AVATAR,\n        layoutConfig: [\n            {\n                x_axis: 0,\n                y_axis: 0,\n                width: AVATAR_WIDTH / AVATAR_BAR_WIDTH,\n                height: 1,\n            },\n        ],\n        backgroundConfig: [],\n    },\n    maxIdleTime: 60,\n    subscribeUidGroup: 3,\n};\n\n// not used, all use small class config\nexport const ONE_TO_ONE_RECORDING_CONFIG: RecordingConfig = {\n    channelType: AgoraCloudRecordingChannelType.Communication,\n    transcodingConfig: {\n        width: 384,\n        height: 216,\n        fps: 15,\n        bitrate: 140,\n        mixedVideoLayout: 1,\n        backgroundColor: \"#000000\",\n        defaultUserBackgroundImage: process.env.CLOUD_RECORDING_DEFAULT_AVATAR,\n    },\n    maxIdleTime: 60,\n    subscribeUidGroup: 0,\n};\n\nexport function getRecordingConfig(roomType: RoomType): RecordingConfig {\n    switch (roomType) {\n        case RoomType.BigClass:\n        case RoomType.SmallClass:\n        case RoomType.OneToOne: {\n            return SMALL_CLASS_RECORDING_CONFIG;\n        }\n        default: {\n            throw new Error(\"Unknown room type \" + JSON.stringify(roomType));\n        }\n    }\n}\n\nexport function convertRoomType(roomType: RoomType): AgoraCloudRecordingChannelType {\n    if (roomType === RoomType.BigClass) {\n        return AgoraCloudRecordingChannelType.Broadcast;\n    } else {\n        return AgoraCloudRecordingChannelType.Communication;\n    }\n}\n\n// not used, all use small class config\nexport const BIG_CLASS_LAYOUT_CONFIG: AgoraCloudRecordLayoutConfigItem[] = [\n    // creator\n    { x_axis: 0, y_axis: 0, width: 1, height: 1, alpha: 1.0, render_mode: 1 },\n    // joiner\n    { x_axis: 0.0, y_axis: 0.67, width: 0.33, height: 0.33, alpha: 1.0, render_mode: 1 },\n];\n\nexport function getClientRequest(\n    roomType: RoomType,\n    users: Array<{ uid: string; avatar: string }>,\n): AgoraCloudRecordUpdateLayoutRequestBody[\"clientRequest\"] {\n    const backgroundConfig: AgoraCloudRecordBackgroundConfigItem[] = users.map(user => ({\n        uid: user.uid,\n        image_url: user.avatar,\n    }));\n\n    // if (roomType === RoomType.BigClass) {\n    //     return {\n    //         mixedVideoLayout: 3,\n    //         backgroundColor: \"#000000\",\n    //         defaultUserBackgroundImage: process.env.CLOUD_RECORDING_DEFAULT_AVATAR,\n    //         backgroundConfig,\n    //         layoutConfig: BIG_CLASS_LAYOUT_CONFIG,\n    //     };\n    // }\n\n    if (\n        roomType === RoomType.BigClass ||\n        roomType === RoomType.SmallClass ||\n        roomType === RoomType.OneToOne\n    ) {\n        return {\n            mixedVideoLayout: 3,\n            backgroundColor: \"#FFFFFF\",\n            defaultUserBackgroundImage: process.env.CLOUD_RECORDING_DEFAULT_AVATAR,\n            backgroundConfig,\n            layoutConfig: users.map((_user, i) => ({\n                x_axis: (i * AVATAR_WIDTH) / AVATAR_BAR_WIDTH,\n                y_axis: 0,\n                width: AVATAR_WIDTH / AVATAR_BAR_WIDTH,\n                height: 1,\n            })),\n        };\n    }\n\n    // if (roomType === RoomType.OneToOne) {\n    //     return {\n    //         mixedVideoLayout: 1,\n    //         backgroundColor: \"#000000\",\n    //         defaultUserBackgroundImage: process.env.CLOUD_RECORDING_DEFAULT_AVATAR,\n    //         backgroundConfig,\n    //         layoutConfig: undefined,\n    //     };\n    // }\n\n    throw new Error(\"Unknown room type \" + JSON.stringify(roomType));\n}\n","import {\n    cloudRecordAcquire,\n    cloudRecordQuery,\n    cloudRecordStart,\n    cloudRecordStop,\n    cloudRecordUpdateLayout,\n    updateRecordEndTime,\n} from \"@netless/flat-server-api\";\nimport { IServiceRecording, IServiceRecordingJoinRoomConfig } from \"@netless/flat-services\";\nimport { Val } from \"value-enhancer\";\nimport polly from \"polly-js\";\n\nimport { getClientRequest, getRecordingConfig } from \"./constants\";\n\nexport type AgoraCloudRecordingRoomInfo = IServiceRecordingJoinRoomConfig;\n\n// Caveats: This service saves current recording state in localStorage \"recordingStates\",\n// which means when you enter your browser's private mode or switch to another browser,\n// the recording state will be lost and you cannot start recording for a while.\n//\n// TODO: We should save the recording state at the server side.\nexport class AgoraCloudRecording extends IServiceRecording {\n    private static readonly ReportingEndTimeKey = \"reportingEndTime\";\n\n    private roomInfo: AgoraCloudRecordingRoomInfo | null;\n    private recordingState: AgoraCloudRecordingState | null;\n\n    public readonly $Val: Readonly<{\n        isRecording$: Val<boolean>;\n    }>;\n\n    public get roomID(): string | null {\n        return this.roomInfo?.roomID ?? null;\n    }\n\n    public get isRecording(): boolean {\n        return this.$Val.isRecording$.value;\n    }\n\n    public constructor() {\n        super();\n\n        this.roomInfo = null;\n        this.recordingState = null;\n\n        this.$Val = {\n            isRecording$: new Val(false),\n        };\n    }\n\n    public async joinRoom(config: IServiceRecordingJoinRoomConfig): Promise<void> {\n        this.roomInfo = config;\n        this.recordingState = loadCloudRecordingState(config.roomID);\n        await this.queryRecordingStatus();\n    }\n\n    public async leaveRoom(): Promise<void> {\n        if (this.isRecording) {\n            await this.stopRecording().catch(console.error);\n        }\n        this.roomInfo = null;\n        this.recordingState = null;\n        this.$Val.isRecording$.setValue(false);\n    }\n\n    public async startRecording(): Promise<void> {\n        if (this.roomInfo === null) {\n            throw new Error(\"should call joinRoom() before startRecording()\");\n        }\n\n        await this.queryRecordingStatus();\n\n        if (this.isRecording) {\n            return;\n        }\n\n        const mode: AgoraCloudRecordingMode = \"mix\";\n        const { roomID, classroomType } = this.roomInfo;\n        try {\n            const RetryIntervals = [0, 1000, 3000, 5000, 7000];\n            const recordingState = await polly()\n                .waitAndRetry(5)\n                .executeForPromise(async ({ count }) => {\n                    if (count) {\n                        await sleep(RetryIntervals[count]);\n                    }\n                    const { resourceId } = await cloudRecordAcquire({\n                        roomUUID: roomID,\n                        agoraData: {\n                            clientRequest: {\n                                resourceExpiredHour: 24,\n                            },\n                        },\n                    });\n                    const { sid } = await cloudRecordStart({\n                        roomUUID: roomID,\n                        agoraParams: {\n                            resourceid: resourceId,\n                            mode: mode,\n                        },\n                        agoraData: {\n                            clientRequest: {\n                                recordingConfig: getRecordingConfig(classroomType),\n                            },\n                        },\n                    });\n                    return { resourceId, sid, mode };\n                });\n\n            this.recordingState = recordingState;\n            saveCloudRecordingState(roomID, recordingState);\n            this.$Val.isRecording$.setValue(true);\n            this.startReportingEndTime();\n        } catch (error) {\n            this.$Val.isRecording$.setValue(false);\n            throw error;\n        }\n    }\n\n    public async stopRecording(): Promise<void> {\n        if (this.roomInfo === null) {\n            console.warn(\"should call joinRoom() before stopRecording()\");\n            return;\n        }\n\n        await this.queryRecordingStatus();\n\n        if (this.recordingState === null) {\n            return;\n        }\n\n        const { roomID } = this.roomInfo;\n        const { resourceId, sid, mode } = this.recordingState;\n\n        this.sideEffect.flush(AgoraCloudRecording.ReportingEndTimeKey);\n        this.recordingState = null;\n\n        try {\n            saveCloudRecordingState(roomID, null);\n            await cloudRecordStop({\n                roomUUID: roomID,\n                agoraParams: {\n                    resourceid: resourceId,\n                    sid: sid,\n                    mode: mode,\n                },\n            });\n        } finally {\n            this.$Val.isRecording$.setValue(false);\n        }\n    }\n\n    public async updateLayout(users: Array<{ uid: string; avatar: string }>): Promise<void> {\n        if (this.roomInfo === null || this.recordingState === null) {\n            throw new Error(\"should call joinRoom() and startRecording() before updateLayout()\");\n        }\n\n        const { roomID, classroomType } = this.roomInfo;\n\n        const clientRequest = getClientRequest(classroomType, users);\n\n        await cloudRecordUpdateLayout({\n            roomUUID: roomID,\n            agoraParams: {\n                resourceid: this.recordingState.resourceId,\n                mode: this.recordingState.mode,\n                sid: this.recordingState.sid,\n            },\n            agoraData: { clientRequest },\n        });\n    }\n\n    private async queryRecordingStatus(): Promise<void> {\n        if (this.recordingState === null || this.roomID === null) {\n            this.$Val.isRecording$.setValue(false);\n            return;\n        }\n        try {\n            const { resourceId, sid, mode } = this.recordingState;\n            const { serverResponse } = await cloudRecordQuery({\n                roomUUID: this.roomID,\n                agoraParams: {\n                    resourceid: resourceId,\n                    sid: sid,\n                    mode: mode,\n                },\n            });\n            const isRecording = 1 <= serverResponse.status && serverResponse.status <= 5;\n            this.$Val.isRecording$.setValue(isRecording);\n        } catch {\n            this.recordingState = null;\n            this.$Val.isRecording$.setValue(false);\n            if (this.roomID) {\n                saveCloudRecordingState(this.roomID, null);\n            }\n        }\n    }\n\n    private startReportingEndTime(): void {\n        this.sideEffect.setInterval(\n            () => {\n                const roomID = this.roomInfo?.roomID;\n                if (this.isRecording && roomID) {\n                    updateRecordEndTime(roomID);\n                } else {\n                    this.sideEffect.flush(AgoraCloudRecording.ReportingEndTimeKey);\n                }\n            },\n            10 * 1000,\n            AgoraCloudRecording.ReportingEndTimeKey,\n        );\n    }\n}\n\n/**\n * @see {@link https://docs.agora.io/en/cloud-recording/reference/rest-api/rest}\n * @see {@link https://docs.agora.io/cn/cloud-recording/cloud_recording_api_rest}\n */\nexport type AgoraCloudRecordingMode = \"individual\" | \"mix\";\n\nexport interface AgoraCloudRecordingState {\n    resourceId: string;\n    sid: string;\n    mode: AgoraCloudRecordingMode;\n}\n\nfunction loadCloudRecordingState(roomID: string): AgoraCloudRecordingState | null {\n    let data: Record<string, AgoraCloudRecordingState>;\n    try {\n        data = JSON.parse(localStorage.getItem(\"recordingStates\") || \"{}\");\n    } catch {\n        data = {};\n    }\n    return data[roomID] ?? null;\n}\n\nfunction saveCloudRecordingState(roomID: string, state: AgoraCloudRecordingState | null): void {\n    let data: Record<string, AgoraCloudRecordingState>;\n    try {\n        data = JSON.parse(localStorage.getItem(\"recordingStates\") || \"{}\");\n    } catch {\n        data = {};\n    }\n    if (state === null) {\n        delete data[roomID];\n    } else {\n        data[roomID] = state;\n    }\n    localStorage.setItem(\"recordingStates\", JSON.stringify(data));\n}\n\nfunction sleep(ms: number): Promise<void> {\n    return new Promise<void>(resolve => setTimeout(resolve, ms));\n}\n"],"names":["IServiceRecording","__publicField","SideEffectManager","Remitter","root","factory","module","this","defaults","execute","config","cb","count","ex","executeForPromise","resolve","reject","original","e","executeForPromiseWithDelay","delay","executeForNode","fn","callback","internalCallback","err","data","executeForNodeWithDelay","delayCountToDelays","delays","i","pollyFn","loggerFn","handleFn","AVATAR_WIDTH","AVATAR_HEIGHT","MAX_AVATAR_COUNT","AVATAR_BAR_WIDTH","SMALL_CLASS_RECORDING_CONFIG","getRecordingConfig","roomType","RoomType","getClientRequest","users","backgroundConfig","user","_user","_AgoraCloudRecording","Val","_b","_a","loadCloudRecordingState","mode","roomID","classroomType","RetryIntervals","recordingState","polly","sleep","resourceId","cloudRecordAcquire","sid","cloudRecordStart","saveCloudRecordingState","error","cloudRecordStop","clientRequest","cloudRecordUpdateLayout","serverResponse","cloudRecordQuery","isRecording","updateRecordEndTime","AgoraCloudRecording","state","ms"],"mappings":"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"}