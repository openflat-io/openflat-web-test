{"version":3,"file":"index.5c2733e0.js","sources":["../../../../packages/flat-components/src/components/FlatIcons/icons/SVGLeft.tsx","../../../../packages/flat-pages/src/SmallClassPage/utils.tsx","../../../../packages/flat-pages/src/SmallClassPage/index.tsx"],"sourcesContent":["import \"../style.less\";\nimport React from \"react\";\nimport { FlatIconProps } from \"../types\";\n\nexport const SVGLeft: React.FC<FlatIconProps> = ({ active, className = \"\", ...restProps }) => {\n    return (\n        <svg\n            className={`${className} flat-icon ${active ? \"is-active\" : \"\"}`}\n            fill=\"none\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            width=\"24\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            {...restProps}\n        >\n            <path\n                className=\"flat-icon-stroke-color\"\n                d=\"m14 8-2 2-2 2 2 2 2 2\"\n                stroke=\"#5D6066\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"1.25\"\n            ></path>\n        </svg>\n    );\n};\n\nexport default SVGLeft;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { listen } from \"@wopjs/dom\";\nimport { noop } from \"lodash-es\";\n\nexport interface Draggable {\n    readonly isDragging: boolean;\n    readonly makeDraggable: (div: HTMLDivElement | null) => void;\n}\n\nexport function useDraggable(): Draggable {\n    const [div, makeDraggable] = useState<HTMLDivElement | null>(null);\n    const start = useRef<[x: number, left: number] | undefined>();\n    const [isDragging, setDragging] = useState(false);\n\n    useEffect(() => {\n        if (div) {\n            let stopListenMove = noop;\n\n            const stopListenDown = listen(div, \"pointerdown\", ev => {\n                const classList = (ev.target as HTMLElement | null)?.classList;\n                const isAvatar =\n                    classList?.contains(\"video-avatar\") ||\n                    classList?.contains(\"video-avatar-absent\");\n                // is dragging avatar, not the buttons on it\n                if (isAvatar && ev.pointerType === \"mouse\" && ev.isPrimary && ev.button === 0) {\n                    div.setPointerCapture(ev.pointerId);\n                    start.current = [ev.clientX, div.scrollLeft];\n                    setDragging(true);\n\n                    stopListenMove = listen(div, \"pointermove\", ev => {\n                        if (ev.isPrimary && start.current) {\n                            const dx = ev.clientX - start.current[0];\n                            div.scrollLeft = start.current[1] - dx;\n                        }\n                    });\n                }\n            });\n\n            const onPointerUp = (ev: PointerEvent): void => {\n                div.releasePointerCapture(ev.pointerId);\n                start.current = undefined;\n                setDragging(false);\n                stopListenMove();\n                stopListenMove = noop;\n            };\n            const stopListenUp = listen(div, \"pointerup\", onPointerUp);\n            const stopListenCancel = listen(div, \"pointercancel\", onPointerUp);\n\n            return () => {\n                stopListenDown();\n                stopListenMove();\n                stopListenUp();\n                stopListenCancel();\n            };\n        }\n        return;\n    }, [div]);\n\n    return { isDragging, makeDraggable };\n}\n\nexport interface Scrollable {\n    readonly isScrollable: boolean;\n    readonly makeScrollable: (div: HTMLDivElement | null) => void;\n    readonly scrollLeft: (ev: React.MouseEvent) => void;\n    readonly scrollRight: (ev: React.MouseEvent) => void;\n}\n\nexport function useScrollable(): Scrollable {\n    const [div, makeScrollable] = useState<HTMLDivElement | null>(null);\n    const [isScrollable, setScrollable] = useState(false);\n\n    useEffect(() => {\n        if (div) {\n            let isHorizontal = false;\n            let timer = 0;\n            // translate mouse wheel to scroll left/right\n            const stopListenWheel = listen(\n                div,\n                \"wheel\",\n                ev => {\n                    if (ev.deltaX !== 0) {\n                        isHorizontal = true;\n                        clearTimeout(timer);\n                        timer = window.setTimeout(() => {\n                            isHorizontal = false;\n                        }, 2000);\n                    }\n                    if (!isHorizontal) {\n                        ev.preventDefault();\n                        div.scrollLeft += ev.deltaY * (ev.deltaMode === 1 ? 18 : 1);\n                    }\n                },\n                { passive: false },\n            );\n            const observer = new ResizeObserver(() => {\n                const { scrollWidth, clientWidth } = div;\n                setScrollable(scrollWidth > clientWidth);\n            });\n            observer.observe(div);\n            return () => {\n                stopListenWheel();\n                observer.disconnect();\n            };\n        }\n        return;\n    }, [div]);\n\n    const DISTANCE = 152;\n\n    const scrollLeft = useCallback(\n        (ev: React.MouseEvent) =>\n            div?.scrollBy({\n                left: -(ev.shiftKey ? 5 : 1) * DISTANCE,\n                behavior: \"smooth\",\n            }),\n        [div],\n    );\n\n    const scrollRight = useCallback(\n        (ev: React.MouseEvent) =>\n            div?.scrollBy({\n                left: (ev.shiftKey ? 5 : 1) * DISTANCE,\n                behavior: \"smooth\",\n            }),\n        [div],\n    );\n\n    return { isScrollable, makeScrollable, scrollLeft, scrollRight };\n}\n","import \"./SmallClassPage.less\";\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { message } from \"antd\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslate } from \"@netless/flat-i18n\";\nimport {\n    NetworkStatus,\n    RoomInfo,\n    TopBar,\n    TopBarDivider,\n    Timer,\n    CloudRecordBtn,\n    TopBarRightBtn,\n    SVGScreenSharing,\n    SVGExit,\n    SVGMenuFold,\n    SVGMenuUnfold,\n    SVGLeft,\n    SVGRight,\n} from \"flat-components\";\n\nimport InviteButton from \"../components/InviteButton\";\nimport { RealtimePanel } from \"../components/RealtimePanel\";\nimport { ChatPanel } from \"../components/ChatPanel\";\nimport { RTCAvatar } from \"../components/RTCAvatar\";\nimport { Whiteboard } from \"../components/Whiteboard\";\nimport ExitRoomConfirm, {\n    ExitRoomConfirmType,\n    useExitRoomConfirmModal,\n} from \"../components/ExitRoomConfirm\";\nimport { RoomStatusStoppedModal } from \"../components/ClassRoom/RoomStatusStoppedModal\";\n\nimport { RoomStatus } from \"@netless/flat-server-api\";\n\nimport { CloudStorageButton } from \"../components/CloudStorageButton\";\nimport { ShareScreen } from \"../components/ShareScreen\";\nimport { useLoginCheck } from \"../utils/use-login-check\";\nimport { withClassroomStore, WithClassroomStoreProps } from \"../utils/with-classroom-store\";\nimport { WindowsSystemBtnContext } from \"../components/StoreProvider\";\nimport { ShareScreenPicker } from \"../components/ShareScreen/ShareScreenPicker\";\nimport { ExtraPadding } from \"../components/ExtraPadding\";\nimport { UsersButton } from \"../components/UsersButton\";\nimport { useScrollable } from \"./utils\";\nimport classNames from \"classnames\";\n\nexport type SmallClassPageProps = {};\n\nexport const SmallClassPage = withClassroomStore<SmallClassPageProps>(\n    observer<WithClassroomStoreProps<SmallClassPageProps>>(function SmallClassPage({\n        classroomStore,\n    }) {\n        useLoginCheck();\n        const t = useTranslate();\n\n        const whiteboardStore = classroomStore.whiteboardStore;\n        const windowsBtn = useContext(WindowsSystemBtnContext);\n\n        const { confirm, ...exitConfirmModalProps } = useExitRoomConfirmModal(classroomStore);\n\n        const [isRealtimeSideOpen, openRealtimeSide] = useState(true);\n\n        useEffect(() => {\n            if (classroomStore.isCreator && classroomStore.roomStatus === RoomStatus.Idle) {\n                void classroomStore.startClass();\n            }\n        }, [classroomStore]);\n\n        const { isScrollable, makeScrollable, scrollLeft, scrollRight } = useScrollable();\n\n        return (\n            <div className=\"small-class-page-container\">\n                <div className=\"small-class-realtime-container\">\n                    <div className=\"small-class-realtime-box\">\n                        {windowsBtn ? (\n                            <TopBar\n                                // center={renderTopBarCenter()}\n                                left={renderTopBarLeft()}\n                                right={renderTopBarRight()}\n                                showWindowsSystemBtn={windowsBtn.showWindowsBtn}\n                                onClickWindowsSystemBtn={windowsBtn.onClickWindowsSystemBtn}\n                                onDoubleClick={windowsBtn.clickWindowMaximize}\n                            />\n                        ) : (\n                            <TopBar left={renderTopBarLeft()} right={renderTopBarRight()} />\n                        )}\n                        {renderAvatars()}\n                        <div className=\"small-class-realtime-content\">\n                            <div className=\"small-class-realtime-content-container\">\n                                <ShareScreen classroomStore={classroomStore} />\n                                <ShareScreenPicker\n                                    classroomStore={classroomStore}\n                                    handleOk={() => classroomStore.toggleShareScreen(true)}\n                                />\n                                <Whiteboard\n                                    classRoomStore={classroomStore}\n                                    whiteboardStore={whiteboardStore}\n                                />\n                            </div>\n                            {renderRealtimePanel()}\n                        </div>\n                        <ExitRoomConfirm\n                            isCreator={classroomStore.isCreator}\n                            {...exitConfirmModalProps}\n                        />\n                        <RoomStatusStoppedModal\n                            isCreator={classroomStore.isCreator}\n                            isRemoteLogin={classroomStore.isRemoteLogin}\n                            roomStatus={classroomStore.roomStatus}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n\n        function renderAvatars(): React.ReactNode {\n            return (\n                <div className=\"small-class-realtime-avatars-wrap-wrap\">\n                    <div ref={makeScrollable} className=\"small-class-realtime-avatars-wrap\">\n                        {classroomStore.isJoinedRTC && (\n                            <div\n                                className=\"small-class-realtime-avatars\"\n                                data-user-uuid=\"[object Object]\"\n                            >\n                                <RTCAvatar\n                                    avatarUser={classroomStore.users.creator}\n                                    getPortal={classroomStore.getPortal}\n                                    isAvatarUserCreator={true}\n                                    isCreator={classroomStore.isCreator}\n                                    isDropTarget={classroomStore.isDropTarget(\n                                        classroomStore.ownerUUID,\n                                    )}\n                                    rtcAvatar={\n                                        classroomStore.users.creator &&\n                                        classroomStore.rtc.getAvatar(\n                                            classroomStore.users.creator.rtcUID,\n                                        )\n                                    }\n                                    small={true}\n                                    updateDeviceState={classroomStore.updateDeviceState}\n                                    userUUID={classroomStore.userUUID}\n                                    onDoubleClick={() =>\n                                        classroomStore.createMaximizedAvatarWindow(\n                                            classroomStore.ownerUUID,\n                                        )\n                                    }\n                                    onDragEnd={classroomStore.onDragEnd}\n                                    onDragStart={classroomStore.onDragStart}\n                                />\n                                {classroomStore.onStageUserUUIDs.map(renderAvatar)}\n                            </div>\n                        )}\n                    </div>\n                    <div\n                        className={classNames(\"small-class-scroll-handles\", {\n                            active: isScrollable,\n                        })}\n                    >\n                        <button\n                            className=\"small-class-scroll-handle is-left\"\n                            title=\"press shift to scroll 5x faster\"\n                            onClick={scrollLeft}\n                        >\n                            <span className=\"small-class-scroll-handle-btn\">\n                                <SVGLeft active />\n                            </span>\n                        </button>\n                        <button\n                            className=\"small-class-scroll-handle is-right\"\n                            title=\"press shift to scroll 5x faster\"\n                            onClick={scrollRight}\n                        >\n                            <span className=\"small-class-scroll-handle-btn\">\n                                <SVGRight active />\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n\n        function renderTopBarLeft(): React.ReactNode {\n            return (\n                <>\n                    <ExtraPadding />\n                    <NetworkStatus networkQuality={classroomStore.networkQuality} />\n                    {classroomStore.isCreator ? (\n                        classroomStore.roomInfo?.beginTime && (\n                            <Timer\n                                beginTime={classroomStore.roomInfo.beginTime}\n                                roomStatus={classroomStore.roomStatus}\n                            />\n                        )\n                    ) : (\n                        <RoomInfo\n                            roomStatus={classroomStore.roomStatus}\n                            roomType={classroomStore.roomInfo?.roomType}\n                        />\n                    )}\n                </>\n            );\n        }\n\n        // function renderClassMode(): React.ReactNode {\n        //     return classroomStore.classMode === ClassModeType.Lecture ? (\n        //         <TopBarRoundBtn\n        //             dark\n        //             icon={<SVGModeLecture />}\n        //             title={t(\"switch-to-interactive-mode\")}\n        //             onClick={classroomStore.toggleClassMode}\n        //         >\n        //             {t(\"lecture-mode\")}\n        //         </TopBarRoundBtn>\n        //     ) : (\n        //         <TopBarRoundBtn\n        //             dark\n        //             icon={<SVGModeInteractive />}\n        //             title={t(\"switch-to-lecture-mode\")}\n        //             onClick={classroomStore.toggleClassMode}\n        //         >\n        //             {t(\"interactive-mode\")}\n        //         </TopBarRoundBtn>\n        //     );\n        // }\n\n        // function renderTopBarCenter(): React.ReactNode {\n        //     if (!classroomStore.isCreator) {\n        //         return null;\n        //     }\n        //     return renderClassMode();\n        // }\n\n        function renderTopBarRight(): React.ReactNode {\n            return (\n                <>\n                    {whiteboardStore.allowDrawing && !classroomStore.isRemoteScreenSharing && (\n                        <TopBarRightBtn\n                            icon={<SVGScreenSharing active={classroomStore.isScreenSharing} />}\n                            title={t(\"share-screen.self\")}\n                            onClick={() => {\n                                if (window.isElectron) {\n                                    if (classroomStore.isScreenSharing) {\n                                        classroomStore.toggleShareScreen(false);\n                                    } else {\n                                        classroomStore.toggleShareScreenPicker(true);\n                                    }\n                                } else {\n                                    classroomStore.toggleShareScreen();\n                                }\n                            }}\n                        />\n                    )}\n\n                    {classroomStore.isCreator && (\n                        <CloudRecordBtn\n                            isRecording={classroomStore.isRecording}\n                            loading={classroomStore.isRecordingLoading}\n                            onClick={() => {\n                                void classroomStore.toggleRecording({\n                                    onStop() {\n                                        void message.success(t(\"recording-completed-tips\"));\n                                    },\n                                });\n                            }}\n                        />\n                    )}\n                    {classroomStore.whiteboardStore.allowDrawing && (\n                        <CloudStorageButton classroom={classroomStore} />\n                    )}\n                    <InviteButton roomInfo={classroomStore.roomInfo} />\n                    {/* TODO: open users sub window */}\n                    <UsersButton classroom={classroomStore} />\n                    {!windowsBtn?.showWindowsBtn && (\n                        <TopBarRightBtn\n                            icon={<SVGExit />}\n                            title={t(\"exit\")}\n                            onClick={() => confirm(ExitRoomConfirmType.ExitButton)}\n                        />\n                    )}\n                    {windowsBtn?.showWindowsBtn ? null : <TopBarDivider />}\n                    <TopBarRightBtn\n                        icon={isRealtimeSideOpen ? <SVGMenuUnfold /> : <SVGMenuFold />}\n                        title={isRealtimeSideOpen ? t(\"side-panel.hide\") : t(\"side-panel.show\")}\n                        onClick={() => {\n                            openRealtimeSide(isRealtimeSideOpen => !isRealtimeSideOpen);\n                            whiteboardStore.setRightSideClose(isRealtimeSideOpen);\n                        }}\n                    />\n                    {windowsBtn?.showWindowsBtn && <TopBarDivider />}\n                </>\n            );\n        }\n\n        function renderRealtimePanel(): React.ReactNode {\n            return (\n                <RealtimePanel\n                    chatSlot={<ChatPanel classRoomStore={classroomStore} />}\n                    isShow={isRealtimeSideOpen}\n                    isVideoOn={false}\n                    videoSlot={null}\n                />\n            );\n        }\n\n        function renderAvatar(userUUID: string): React.ReactNode {\n            const user = classroomStore.users.cachedUsers.get(userUUID);\n            return (\n                <RTCAvatar\n                    key={userUUID}\n                    avatarUser={user}\n                    getPortal={classroomStore.getPortal}\n                    isAvatarUserCreator={false}\n                    isCreator={classroomStore.isCreator}\n                    isDropTarget={classroomStore.isDropTarget(userUUID)}\n                    rtcAvatar={user && classroomStore.rtc.getAvatar(user.rtcUID)}\n                    small={true}\n                    updateDeviceState={(uid, camera, mic) => {\n                        // Disallow toggling mic when not speak.\n                        const _mic =\n                            whiteboardStore.isWritable ||\n                            !user ||\n                            user.userUUID === classroomStore.ownerUUID ||\n                            user.userUUID !== classroomStore.users.currentUser?.userUUID\n                                ? mic\n                                : user.mic;\n                        classroomStore.updateDeviceState(uid, camera, _mic);\n                    }}\n                    userUUID={classroomStore.userUUID}\n                    onDoubleClick={() =>\n                        user && classroomStore.createMaximizedAvatarWindow(user.userUUID)\n                    }\n                    onDragEnd={classroomStore.onDragEnd}\n                    onDragStart={classroomStore.onDragStart}\n                />\n            );\n        }\n    }),\n);\n\nexport default SmallClassPage;\n"],"names":["SVGLeft","active","className","restProps","useScrollable","div","makeScrollable","useState","isScrollable","setScrollable","useEffect","isHorizontal","timer","stopListenWheel","listen","ev","deltaX","clearTimeout","window","setTimeout","preventDefault","scrollLeft","deltaY","deltaMode","passive","observer","ResizeObserver","scrollWidth","clientWidth","observe","disconnect","DISTANCE","useCallback","scrollBy","left","shiftKey","behavior","scrollRight","SmallClassPage","withClassroomStore","classroomStore","useLoginCheck","t","useTranslate","whiteboardStore","windowsBtn","useContext","WindowsSystemBtnContext","confirm","exitConfirmModalProps","useExitRoomConfirmModal","isRealtimeSideOpen","openRealtimeSide","isCreator","roomStatus","RoomStatus","Idle","startClass","_jsx","TopBar","renderTopBarLeft","renderTopBarRight","showWindowsBtn","onClickWindowsSystemBtn","clickWindowMaximize","renderAvatars","_jsxs","ShareScreen","ShareScreenPicker","toggleShareScreen","Whiteboard","renderRealtimePanel","ExitRoomConfirm","RoomStatusStoppedModal","isRemoteLogin","isJoinedRTC","RTCAvatar","users","creator","getPortal","isDropTarget","ownerUUID","rtc","getAvatar","rtcUID","updateDeviceState","userUUID","createMaximizedAvatarWindow","onDragEnd","onDragStart","onStageUserUUIDs","map","renderAvatar","classNames","SVGRight","_Fragment","ExtraPadding","NetworkStatus","networkQuality","roomInfo","beginTime","Timer","RoomInfo","roomType","allowDrawing","isRemoteScreenSharing","TopBarRightBtn","SVGScreenSharing","isScreenSharing","isElectron","toggleShareScreenPicker","CloudRecordBtn","isRecording","isRecordingLoading","toggleRecording","onStop","message","success","CloudStorageButton","InviteButton","UsersButton","SVGExit","ExitRoomConfirmType","ExitButton","TopBarDivider","SVGMenuUnfold","SVGMenuFold","setRightSideClose","RealtimePanel","ChatPanel","user","cachedUsers","get","uid","camera","mic","_mic","isWritable","currentUser"],"mappings":"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"}