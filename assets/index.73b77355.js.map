{"version":3,"file":"index.73b77355.js","sources":["../../../../packages/flat-components/src/components/DeviceTestPage/icons/camera-disabled.svg","../../../../packages/flat-components/src/components/DeviceTestPage/icons/disabled.svg","../../../../packages/flat-components/src/components/DeviceTestPage/DeviceTestSelect/index.tsx","../../../../packages/flat-components/src/components/DeviceTestPage/CameraTest/index.tsx","../../../../packages/flat-components/src/components/DeviceTestPage/MicrophoneTest/index.tsx","../../../../packages/flat-components/src/components/DeviceTestPage/icons/play.svg","../../../../packages/flat-components/src/components/DeviceTestPage/icons/stop.svg","../../../../packages/flat-components/src/components/DeviceTestPage/SpeakerTest/assets/media/Goldberg Variations, BWV 988 - 05 - Variatio 4 a 1 Clav.mp3","../../../../packages/flat-components/src/components/DeviceTestPage/SpeakerTest/index.tsx","../../../../packages/flat-components/src/components/DeviceTestPage/index.tsx","../../../../packages/flat-pages/src/DevicesTestPage/index.tsx"],"sourcesContent":["export default \"data:image/svg+xml;charset=utf8,%3csvg width='120' height='120' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M86.562 93.048a2.5 2.5 0 1 1-3.124 3.904c-13.703-10.962-33.173-10.962-46.876 0a2.5 2.5 0 1 1-3.124-3.904c15.53-12.423 37.595-12.423 53.124 0Zm5.206-64.816a2.5 2.5 0 0 1 .289 3.19l-.29.346-6.765 6.764-3.83 3.832-.001-.001-8.717 8.719-11.371 11.372-.002-.001-8.717 8.718h.001l-3.832 3.832-.001-.001-16.764 16.766a2.5 2.5 0 0 1-3.825-3.19l.29-.346 60-60a2.5 2.5 0 0 1 3.535 0ZM86.8 43.807c.458 1.99.7 4.063.7 6.193 0 15.188-12.312 27.5-27.5 27.5-2.13 0-4.202-.242-6.193-.7l4.373-4.373c.6.048 1.207.073 1.82.073 12.426 0 22.5-10.074 22.5-22.5 0-.613-.025-1.22-.073-1.82l4.373-4.373ZM60 22.5a27.41 27.41 0 0 1 19.14 7.753l-3.536 3.537A22.425 22.425 0 0 0 60 27.5c-12.426 0-22.5 10.074-22.5 22.5 0 6.06 2.395 11.559 6.29 15.604l-3.537 3.536A27.41 27.41 0 0 1 32.5 50c0-15.188 12.312-27.5 27.5-27.5Zm0 15c3.298 0 6.297 1.277 8.53 3.363l-3.539 3.539a7.5 7.5 0 0 0-10.59 10.59l-3.538 3.539A12.456 12.456 0 0 1 47.5 50c0-6.904 5.596-12.5 12.5-12.5Z' fill='%237A7B7C'/%3e%3c/svg%3e\";","export default \"data:image/svg+xml;charset=utf8,%3csvg width='12' height='12' xmlns='http://www.w3.org/2000/svg'%3e%3cg fill='none' fill-rule='evenodd'%3e%3ccircle fill='%23FFCD00' cx='6' cy='6' r='6'/%3e%3cpath d='M6.75 5v5h-1.5V5h1.5ZM6 2a1 1 0 1 1 0 2 1 1 0 0 1 0-2Z' fill='%231A1E21' fill-rule='nonzero'/%3e%3c/g%3e%3c/svg%3e\";","import disabledSVG from \"../icons/disabled.svg\";\nimport \"./style.less\";\n\nimport React from \"react\";\nimport { Button, Select } from \"antd\";\nimport { Device } from \"../constants\";\nimport { useTranslate } from \"@netless/flat-i18n\";\n\nexport interface DeviceTestSelectProps {\n    devices?: Device[];\n    isDeviceAccessible: boolean;\n    currentDeviceID: string;\n    onChange: (deviceID: string) => void;\n}\n\nexport const DeviceTestSelect: React.FC<DeviceTestSelectProps> = ({\n    devices,\n    isDeviceAccessible,\n    currentDeviceID,\n    onChange,\n}) => {\n    const t = useTranslate();\n    const deviceId = devices?.some(device => device.deviceId === currentDeviceID)\n        ? currentDeviceID\n        : undefined;\n\n    return (\n        <div className=\"device-test-select-container\">\n            {isDeviceAccessible ? (\n                <div className=\"device-test-select-box\">\n                    <Select value={deviceId} onChange={onChange}>\n                        {devices?.map(({ deviceId, label }) => {\n                            return (\n                                <Select.Option key={deviceId} value={deviceId}>\n                                    {label}\n                                </Select.Option>\n                            );\n                        })}\n                    </Select>\n                </div>\n            ) : (\n                <div className=\"device-test-select-disabled-btn\">\n                    <Button icon={<img src={disabledSVG} />}>{t(\"no-device-permission\")}</Button>\n                </div>\n            )}\n        </div>\n    );\n};\n","import \"./style.less\";\nimport cameraDisabledSVG from \"../icons/camera-disabled.svg\";\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { Device } from \"../constants\";\nimport { DeviceTestSelect } from \"../DeviceTestSelect\";\nimport { useTranslate } from \"@netless/flat-i18n\";\n\nexport interface CameraTestProps {\n    cameraDevices?: Device[];\n    isCameraAccessible: boolean;\n    currentCameraDeviceID: string;\n    cameraVideoStreamRef: React.RefObject<HTMLDivElement>;\n    setCameraDevice: (deviceID: string) => void;\n}\n\nexport const CameraTest: React.FC<CameraTestProps> = ({\n    cameraDevices,\n    isCameraAccessible,\n    currentCameraDeviceID,\n    cameraVideoStreamRef,\n    setCameraDevice,\n}) => {\n    const t = useTranslate();\n\n    return (\n        <div className=\"camera-test-container\">\n            <div className=\"camera-test-text\">{t(\"camera\")}</div>\n            <div className=\"camera-test-select-box\">\n                <DeviceTestSelect\n                    currentDeviceID={currentCameraDeviceID}\n                    devices={cameraDevices}\n                    isDeviceAccessible={isCameraAccessible}\n                    onChange={setCameraDevice}\n                />\n            </div>\n            <div className=\"camera-test-wrapper\">\n                <div ref={cameraVideoStreamRef} className=\"camera-box\" />\n                <div\n                    className={classNames(\"camera-no-accredit-box\", {\n                        visible: !isCameraAccessible,\n                    })}\n                >\n                    <img src={cameraDisabledSVG} />\n                    <span>{t(\"enable-camera-permission-tip\")}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import \"./style.less\";\n\nimport React from \"react\";\nimport { Device } from \"../constants\";\nimport { DeviceTestSelect } from \"../DeviceTestSelect\";\nimport { useTranslate } from \"@netless/flat-i18n\";\n\nexport interface MicrophoneTestProps {\n    microphoneDevices?: Device[];\n    microphoneVolume: number;\n    currentMicrophoneDeviceID: string;\n    isMicrophoneAccessible: boolean;\n    setMicrophoneDevice: (deviceID: string) => void;\n}\n\nexport const MicrophoneTest: React.FC<MicrophoneTestProps> = ({\n    microphoneDevices,\n    microphoneVolume,\n    isMicrophoneAccessible,\n    currentMicrophoneDeviceID,\n    setMicrophoneDevice,\n}) => {\n    const t = useTranslate();\n\n    return (\n        <div className=\"microphone-test-container\">\n            <div className=\"microphone-test-text\">{t(\"microphone\")}</div>\n            <div className=\"microphone-text-select-box\">\n                <DeviceTestSelect\n                    currentDeviceID={currentMicrophoneDeviceID}\n                    devices={microphoneDevices}\n                    isDeviceAccessible={isMicrophoneAccessible}\n                    onChange={setMicrophoneDevice}\n                />\n            </div>\n            <div className=\"microphone-test-wrapper\">\n                <div\n                    className=\"microphone-test-volume\"\n                    style={{ width: `${microphoneVolume * 100}%` }}\n                />\n                <div className=\"microphone-test-mask\" />\n            </div>\n        </div>\n    );\n};\n","export default \"data:image/svg+xml;charset=utf8,%3csvg width='24' height='24' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M6.5 5v14l11-7z' fill='%235D5D5D' fill-rule='evenodd'/%3e%3c/svg%3e\";","export default \"data:image/svg+xml;charset=utf8,%3csvg width='22' height='22' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M7 5h2v12H7zm6 0h2v12h-2z' fill='%23444E60' fill-rule='evenodd'/%3e%3c/svg%3e\";","export default \"__VITE_ASSET__e8025df4__\"","import playSVG from \"../icons/play.svg\";\nimport stopSVG from \"../icons/stop.svg\";\nimport \"./style.less\";\n\nimport { Button } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { Device } from \"../constants\";\nimport { DeviceTestSelect } from \"../DeviceTestSelect\";\nimport { useTranslate } from \"@netless/flat-i18n\";\nimport audioLocalResourceMP3 from \"./assets/media/Goldberg Variations, BWV 988 - 05 - Variatio 4 a 1 Clav.mp3\";\n\nexport interface SpeakerTestProps {\n    speakerDevices?: Device[];\n    speakerTestFileName: string;\n    currentSpeakerDeviceID: string;\n    isSpeakerAccessible: boolean;\n    audioResourceSrc?: string;\n    setSpeakerDevice: (deviceID: string) => void;\n    startSpeakerTest: (url: string) => void;\n    stopSpeakerTest: () => void;\n}\n\nexport const SpeakerTest: React.FC<SpeakerTestProps> = ({\n    speakerDevices,\n    speakerTestFileName,\n    currentSpeakerDeviceID,\n    isSpeakerAccessible,\n    audioResourceSrc,\n    setSpeakerDevice,\n    startSpeakerTest,\n    stopSpeakerTest,\n}) => {\n    const t = useTranslate();\n    const [isPlaying, setIsPlaying] = useState(false);\n\n    const togglePlay = (): void => {\n        setIsPlaying(!isPlaying);\n    };\n\n    useEffect(() => {\n        if (isPlaying) {\n            startSpeakerTest(audioResourceSrc || audioLocalResourceMP3);\n        } else {\n            stopSpeakerTest();\n        }\n        return () => {\n            stopSpeakerTest();\n        };\n    }, [audioResourceSrc, isPlaying, startSpeakerTest, stopSpeakerTest]);\n\n    return (\n        <div className=\"speaker-test-container\">\n            <div className=\"speaker-test-text\">{t(\"speaker\")}</div>\n            <div className=\"speaker-text-select-box\">\n                <DeviceTestSelect\n                    currentDeviceID={currentSpeakerDeviceID}\n                    devices={speakerDevices}\n                    isDeviceAccessible={isSpeakerAccessible}\n                    onChange={setSpeakerDevice}\n                />\n            </div>\n            <div className=\"speaker-test-output-box\">\n                <Button icon={<img src={isPlaying ? stopSVG : playSVG} />} onClick={togglePlay}>\n                    {speakerTestFileName}\n                </Button>\n            </div>\n        </div>\n    );\n};\n","import \"./style.less\";\n\nimport { Button, Checkbox } from \"antd\";\nimport React from \"react\";\nimport { CameraTest } from \"./CameraTest\";\nimport { Device } from \"./constants\";\nimport { MicrophoneTest } from \"./MicrophoneTest\";\nimport { SpeakerTest } from \"./SpeakerTest\";\nimport { useTranslate } from \"@netless/flat-i18n\";\n\nexport type { Device };\n\nexport interface DeviceTestPanelProps {\n    cameraDevices?: Device[];\n    speakerDevices?: Device[];\n    microphoneDevices?: Device[];\n    audioResourceSrc?: string;\n    speakerTestFileName: string;\n    currentCameraDeviceID: string;\n    currentSpeakerDeviceID: string;\n    currentMicrophoneDeviceID: string;\n    microphoneVolume: number;\n    isCameraAccessible: boolean;\n    isSpeakerAccessible: boolean;\n    isMicrophoneAccessible: boolean;\n    cameraVideoStreamRef: React.RefObject<HTMLDivElement>;\n    isTurnOffDeviceTest: boolean;\n    setSpeakerDevice: (deviceID: string) => void;\n    setCameraDevice: (deviceID: string) => void;\n    setMicrophoneDevice: (deviceID: string) => void;\n    startSpeakerTest: (url: string) => void;\n    stopSpeakerTest: () => void;\n    toggleDeviceTest: () => void;\n    joinRoom: () => void;\n    autoMicOn: boolean;\n    autoCameraOn: boolean;\n    toggleAutoMicOn: () => void;\n    toggleAutoCameraOn: () => void;\n}\n\nexport const DeviceTestPanel: React.FC<DeviceTestPanelProps> = ({\n    cameraDevices,\n    speakerDevices,\n    microphoneDevices,\n    audioResourceSrc,\n    speakerTestFileName,\n    currentCameraDeviceID,\n    currentSpeakerDeviceID,\n    currentMicrophoneDeviceID,\n    microphoneVolume,\n    isCameraAccessible,\n    isSpeakerAccessible,\n    isMicrophoneAccessible,\n    cameraVideoStreamRef,\n    isTurnOffDeviceTest,\n    setCameraDevice,\n    setMicrophoneDevice,\n    setSpeakerDevice,\n    startSpeakerTest,\n    stopSpeakerTest,\n    toggleDeviceTest,\n    joinRoom,\n    autoMicOn,\n    autoCameraOn,\n    toggleAutoMicOn,\n    toggleAutoCameraOn,\n}) => {\n    const t = useTranslate();\n    return (\n        <div className=\"device-test-panel-container\">\n            <div className=\"device-test-panel-title-box\">{t(\"device-test\")}</div>\n            <div className=\"device-test-panel-inner-box\">\n                <div className=\"device-test-panel-inner-left\">\n                    <CameraTest\n                        cameraDevices={cameraDevices}\n                        cameraVideoStreamRef={cameraVideoStreamRef}\n                        currentCameraDeviceID={currentCameraDeviceID}\n                        isCameraAccessible={isCameraAccessible}\n                        setCameraDevice={setCameraDevice}\n                    />\n                </div>\n                <div className=\"device-test-panel-inner-right\">\n                    <SpeakerTest\n                        audioResourceSrc={audioResourceSrc}\n                        currentSpeakerDeviceID={currentSpeakerDeviceID}\n                        isSpeakerAccessible={isSpeakerAccessible}\n                        setSpeakerDevice={setSpeakerDevice}\n                        speakerDevices={speakerDevices}\n                        speakerTestFileName={speakerTestFileName}\n                        startSpeakerTest={startSpeakerTest}\n                        stopSpeakerTest={stopSpeakerTest}\n                    />\n                    <MicrophoneTest\n                        currentMicrophoneDeviceID={currentMicrophoneDeviceID}\n                        isMicrophoneAccessible={isMicrophoneAccessible}\n                        microphoneDevices={microphoneDevices}\n                        microphoneVolume={microphoneVolume}\n                        setMicrophoneDevice={setMicrophoneDevice}\n                    />\n                    <div className=\"device-test-panel-join-options\">\n                        <div className=\"device-test-panel-join-options-text\">\n                            {t(\"join-options\")}\n                        </div>\n                        <Checkbox checked={autoMicOn} onClick={toggleAutoMicOn}>\n                            {t(\"turn-on-the-microphone\")}\n                        </Checkbox>\n                        <Checkbox checked={autoCameraOn} onClick={toggleAutoCameraOn}>\n                            {t(\"turn-on-the-camera\")}\n                        </Checkbox>\n                    </div>\n                </div>\n            </div>\n            <div className=\"device-test-panel-tips-box\">\n                <div className=\"device-test-panel-tips-radio\">\n                    <Checkbox checked={isTurnOffDeviceTest} onClick={toggleDeviceTest}>\n                        {t(\"close-tip\")}\n                    </Checkbox>\n                </div>\n                <div className=\"device-test-panel-join-btn\">\n                    <Button type=\"primary\" onClick={joinRoom}>\n                        {t(\"join-room\")}\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import \"./style.less\";\n\nimport { DeviceTestPanel } from \"flat-components\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { IServiceVideoChatDevice } from \"@netless/flat-services\";\n\nimport { noop } from \"lodash-es\";\nimport { useParams } from \"react-router-dom\";\nimport { RouteNameType, RouteParams, usePushHistory } from \"../utils/routes\";\nimport { joinRoomHandler } from \"../utils/join-room-handler\";\nimport { GlobalStoreContext, PreferencesStoreContext } from \"../components/StoreProvider\";\nimport { useSafePromise } from \"../utils/hooks/lifecycle\";\nimport { useLoginCheck } from \"../utils/use-login-check\";\nimport { useFlatService } from \"../components/FlatServicesContext\";\n\nexport const DevicesTestPage = observer(function DeviceTestPage() {\n    const pushHistory = usePushHistory();\n    const globalStore = useContext(GlobalStoreContext);\n    const rtc = useFlatService(\"videoChat\");\n    const preferencesStore = useContext(PreferencesStoreContext);\n    const sp = useSafePromise();\n\n    useLoginCheck();\n\n    const { roomUUID } = useParams<RouteParams<RouteNameType.JoinPage>>();\n\n    const cameraVideoStreamRef = useRef<HTMLDivElement>(null);\n\n    const [cameraDevices, setCameraDevices] = useState<IServiceVideoChatDevice[]>([]);\n    const [microphoneDevices, setMicrophoneDevices] = useState<IServiceVideoChatDevice[]>([]);\n    const [speakerDevices, setSpeakerDevices] = useState<IServiceVideoChatDevice[]>([]);\n\n    const [cameraDeviceId, setCameraDeviceId] = useState<string>(\"\");\n    const [microphoneDeviceId, setMicrophoneDeviceId] = useState<string>(\"\");\n    const [speakerDeviceId, setSpeakerDeviceId] = useState<string>(\"\");\n\n    const [isCameraAccessible, setIsCameraAccessible] = useState(true);\n    const [isMicrophoneAccessible, setIsMicrophoneAccessible] = useState(true);\n    const [isSpeakerAccessible, setIsSpeakerAccessible] = useState(true);\n\n    const [volume, setVolume] = useState(0);\n\n    useEffect(() => {\n        if (!rtc) {\n            return;\n        }\n        // @FIXME only run once\n        const avatar = rtc.getTestAvatar();\n        if (avatar) {\n            avatar.enableCamera(true);\n            avatar.enableMic(true);\n            avatar.setElement(cameraVideoStreamRef.current);\n\n            const ticket = window.setInterval(() => {\n                // add noise\n                setVolume(Math.min(avatar.getVolumeLevel() + Math.random() * 0.05, 1));\n            }, 50);\n\n            return () => {\n                window.clearInterval(ticket);\n                avatar.enableCamera(false);\n                avatar.enableMic(false);\n                avatar.setElement(null);\n            };\n        }\n        return;\n    }, [rtc, cameraVideoStreamRef]);\n\n    useEffect(() => {\n        if (!rtc) {\n            return;\n        }\n\n        const refreshCameraDevices = (): void => {\n            sp(rtc.getCameraDevices())\n                .then(devices => {\n                    const cameraDevices = devices.filter(device => device.deviceId);\n                    setCameraDevices(cameraDevices);\n                    setIsCameraAccessible(cameraDevices.length > 0);\n                })\n                .catch(() => {\n                    setIsCameraAccessible(false);\n                });\n        };\n\n        const refreshMicDevices = (): void => {\n            sp(rtc.getMicDevices())\n                .then(devices => {\n                    const microphoneDevices = devices.filter(device => device.deviceId);\n                    setMicrophoneDevices(microphoneDevices);\n                    setIsMicrophoneAccessible(microphoneDevices.length > 0);\n                })\n                .catch(() => {\n                    setIsMicrophoneAccessible(false);\n                });\n        };\n\n        const refreshSpeakerDevices = (): void => {\n            sp(rtc.getSpeakerDevices())\n                .then(devices => {\n                    const speakerDevices = devices.filter(device => device.deviceId);\n                    setSpeakerDevices(speakerDevices);\n                    setIsMicrophoneAccessible(speakerDevices.length > 0);\n                })\n                .catch(() => {\n                    setIsSpeakerAccessible(false);\n                });\n        };\n\n        const cameraChangeDisposer = rtc.events.on(\"camera-changed\", refreshCameraDevices);\n        const micChangedDisposer = rtc.events.on(\"mic-changed\", refreshMicDevices);\n        const speakerChangedDisposer = rtc.events.on(\"speaker-changed\", refreshSpeakerDevices);\n\n        refreshCameraDevices();\n        refreshMicDevices();\n        refreshSpeakerDevices();\n\n        return () => {\n            cameraChangeDisposer();\n            micChangedDisposer();\n            speakerChangedDisposer();\n        };\n    }, [rtc, sp]);\n\n    useEffect(() => {\n        if (rtc && cameraDeviceId) {\n            void rtc.setCameraID(cameraDeviceId).catch(() => {\n                setIsCameraAccessible(false);\n            });\n        }\n    }, [rtc, cameraDeviceId]);\n\n    useEffect(() => {\n        if (rtc && microphoneDeviceId) {\n            void rtc.setMicID(microphoneDeviceId).catch(() => {\n                setIsMicrophoneAccessible(false);\n            });\n        }\n    }, [rtc, microphoneDeviceId]);\n\n    useEffect(() => {\n        if (rtc && speakerDeviceId) {\n            void rtc.setSpeakerID(speakerDeviceId).catch(() => {\n                setIsSpeakerAccessible(false);\n            });\n        }\n    }, [rtc, speakerDeviceId]);\n\n    useEffect(() => {\n        // check device id on changes\n        if (cameraDevices.length > 0 && !cameraDeviceId) {\n            const lastCameraId = preferencesStore.cameraId;\n            if (lastCameraId && cameraDevices.find(device => device.deviceId === lastCameraId)) {\n                setCameraDeviceId(lastCameraId);\n            } else {\n                setCameraDeviceId(cameraDevices[0].deviceId);\n            }\n        }\n    }, [preferencesStore, cameraDeviceId, cameraDevices]);\n\n    useEffect(() => {\n        // check device id on changes\n        if (microphoneDevices.length > 0 && !microphoneDeviceId) {\n            const lastMicrophoneId = preferencesStore.microphoneId;\n            if (\n                lastMicrophoneId &&\n                microphoneDevices.some(device => device.deviceId === lastMicrophoneId)\n            ) {\n                setMicrophoneDeviceId(lastMicrophoneId);\n            } else {\n                setMicrophoneDeviceId(microphoneDevices[0].deviceId);\n            }\n        }\n    }, [preferencesStore, microphoneDeviceId, microphoneDevices]);\n\n    useEffect(() => {\n        // check device id on changes\n        if (speakerDevices.length > 0 && !speakerDeviceId) {\n            const lastSpeakerId = preferencesStore.speakerId;\n            if (lastSpeakerId && speakerDevices.some(device => device.deviceId === lastSpeakerId)) {\n                setSpeakerDeviceId(lastSpeakerId);\n            } else {\n                setSpeakerDeviceId(speakerDevices[0].deviceId);\n            }\n        }\n    }, [preferencesStore, speakerDeviceId, speakerDevices]);\n\n    const joinRoom = async (): Promise<void> => {\n        preferencesStore.updateCameraId(cameraDeviceId);\n        preferencesStore.updateMicrophoneId(microphoneDeviceId);\n        await joinRoomHandler(roomUUID, pushHistory);\n    };\n\n    return (\n        <div className=\"device-test-page-container\">\n            <div className=\"device-test-panel-box\">\n                <DeviceTestPanel\n                    autoCameraOn={preferencesStore.autoCameraOn}\n                    autoMicOn={preferencesStore.autoMicOn}\n                    cameraDevices={cameraDevices}\n                    cameraVideoStreamRef={cameraVideoStreamRef}\n                    currentCameraDeviceID={cameraDeviceId}\n                    currentMicrophoneDeviceID={microphoneDeviceId}\n                    currentSpeakerDeviceID={speakerDeviceId}\n                    isCameraAccessible={isCameraAccessible}\n                    isMicrophoneAccessible={isMicrophoneAccessible}\n                    isSpeakerAccessible={isSpeakerAccessible}\n                    isTurnOffDeviceTest={globalStore.isTurnOffDeviceTest}\n                    joinRoom={joinRoom}\n                    microphoneDevices={microphoneDevices}\n                    microphoneVolume={volume}\n                    setCameraDevice={setCameraDeviceId}\n                    setMicrophoneDevice={setMicrophoneDeviceId}\n                    setSpeakerDevice={setSpeakerDeviceId}\n                    speakerDevices={speakerDevices}\n                    speakerTestFileName={\"Music\"}\n                    startSpeakerTest={rtc ? rtc.startSpeakerTest : noop}\n                    stopSpeakerTest={rtc ? rtc.stopSpeakerTest : noop}\n                    toggleAutoCameraOn={() =>\n                        preferencesStore.updateAutoCameraOn(!preferencesStore.autoCameraOn)\n                    }\n                    toggleAutoMicOn={() =>\n                        preferencesStore.updateAutoMicOn(!preferencesStore.autoMicOn)\n                    }\n                    toggleDeviceTest={globalStore.toggleDeviceTest}\n                />\n            </div>\n        </div>\n    );\n});\n\nexport default DevicesTestPage;\n"],"names":["cameraDisabledSVG","disabledSVG","DeviceTestSelect","devices","isDeviceAccessible","currentDeviceID","onChange","t","useTranslate","deviceId","some","device","undefined","_jsx","Select","map","label","Button","CameraTest","cameraDevices","isCameraAccessible","currentCameraDeviceID","cameraVideoStreamRef","setCameraDevice","_jsxs","classNames","visible","MicrophoneTest","microphoneDevices","microphoneVolume","isMicrophoneAccessible","currentMicrophoneDeviceID","setMicrophoneDevice","width","playSVG","stopSVG","audioLocalResourceMP3","SpeakerTest","speakerDevices","speakerTestFileName","currentSpeakerDeviceID","isSpeakerAccessible","audioResourceSrc","setSpeakerDevice","startSpeakerTest","stopSpeakerTest","isPlaying","setIsPlaying","useState","togglePlay","useEffect","DeviceTestPanel","isTurnOffDeviceTest","toggleDeviceTest","joinRoom","autoMicOn","autoCameraOn","toggleAutoMicOn","toggleAutoCameraOn","Checkbox","DevicesTestPage","observer","pushHistory","usePushHistory","globalStore","useContext","GlobalStoreContext","rtc","useFlatService","preferencesStore","PreferencesStoreContext","sp","useSafePromise","useLoginCheck","roomUUID","useParams","useRef","setCameraDevices","setMicrophoneDevices","setSpeakerDevices","cameraDeviceId","setCameraDeviceId","microphoneDeviceId","setMicrophoneDeviceId","speakerDeviceId","setSpeakerDeviceId","setIsCameraAccessible","setIsMicrophoneAccessible","setIsSpeakerAccessible","volume","setVolume","avatar","getTestAvatar","enableCamera","enableMic","setElement","current","ticket","window","setInterval","Math","min","getVolumeLevel","random","clearInterval","refreshCameraDevices","getCameraDevices","then","filter","length","catch","refreshMicDevices","getMicDevices","refreshSpeakerDevices","getSpeakerDevices","cameraChangeDisposer","events","on","micChangedDisposer","speakerChangedDisposer","setCameraID","setMicID","setSpeakerID","lastCameraId","cameraId","find","lastMicrophoneId","microphoneId","lastSpeakerId","speakerId","updateCameraId","updateMicrophoneId","joinRoomHandler","noop","updateAutoCameraOn","updateAutoMicOn"],"mappings":"oWAAA,MAAAA,GAAe,6jCCAfC,GAAe,4TCeFC,EAAoD,CAAC,CAC9DC,QAAAA,EACAC,mBAAAA,EACAC,gBAAAA,EACAC,SAAAA,CAJ8D,IAK5D,CACF,MAAMC,EAAIC,IACJC,EAAWN,GAAAA,MAAAA,EAASO,KAAKC,GAAUA,EAAOF,WAAaJ,GACvDA,EACAO,OAEN,SACI,MAAA,CAAK,UAAU,+BAAf,SACKR,EACGS,EAAA,MAAA,CAAK,UAAU,yBAAf,WACKC,EAAD,CAAQ,MAAOL,EAAU,SAAAH,EAAzB,SACKH,GAAAA,YAAAA,EAASY,IAAI,CAAC,CAAEN,SAAAA,EAAUO,MAAAA,CAAAA,IAEnBH,EAACC,EAAO,OAAR,CAA8B,MAAOL,EAArC,SACKO,GADeP,CAApB,EAFP,CADL,CAAA,CADJ,EAYAI,EAAA,MAAA,CAAK,UAAU,kCAAf,WACKI,EAAD,CAAQ,OAAM,MAAA,CAAK,IAAKhB,EAAAA,CAAxB,EAAA,SAA0CM,EAAE,sBAAD,CAAA,CAA3C,CAAA,CADJ,CAAA,CAfZ,CAqBH,EC9BYW,GAAwC,CAAC,CAClDC,cAAAA,EACAC,mBAAAA,EACAC,sBAAAA,EACAC,qBAAAA,EACAC,gBAAAA,CALkD,IAMhD,CACF,MAAMhB,EAAIC,IAEV,SACI,MAAA,CAAK,UAAU,wBAAf,SACI,CAAAK,EAAA,MAAA,CAAK,UAAU,mBAAf,SAAmCN,EAAE,QAAD,CAAA,CAApC,EACAM,EAAA,MAAA,CAAK,UAAU,yBAAf,WACKX,EAAD,CACI,gBAAiBmB,EACjB,QAASF,EACT,mBAAoBC,EACpB,SAAUG,CAAAA,CAJd,CAAA,CADJ,EAQAC,EAAA,MAAA,CAAK,UAAU,sBAAf,SACI,CAAAX,EAAA,MAAA,CAAK,IAAKS,EAAsB,UAAU,YAAA,CAA1C,EACAE,EAAA,MAAA,CACI,UAAWC,EAAW,yBAA0B,CAC5CC,QAAS,CAACN,CAAAA,CADO,EADzB,SAKI,CAAAP,EAAA,MAAA,CAAK,IAAKb,EAAAA,CAAV,EACAa,EAAA,OAAA,CAAA,SAAON,EAAE,8BAAD,CAAA,CANZ,CAAA,CAAA,CAFJ,CAAA,CAAA,CAVJ,CAAA,CAAA,CADJ,CAwBH,ECnCYoB,GAAgD,CAAC,CAC1DC,kBAAAA,EACAC,iBAAAA,EACAC,uBAAAA,EACAC,0BAAAA,EACAC,oBAAAA,CAL0D,IAMxD,CACF,MAAMzB,EAAIC,IAEV,SACI,MAAA,CAAK,UAAU,4BAAf,SACI,CAAAK,EAAA,MAAA,CAAK,UAAU,uBAAf,SAAuCN,EAAE,YAAD,CAAA,CAAxC,EACAM,EAAA,MAAA,CAAK,UAAU,6BAAf,WACKX,EAAD,CACI,gBAAiB6B,EACjB,QAASH,EACT,mBAAoBE,EACpB,SAAUE,CAAAA,CAJd,CAAA,CADJ,EAQAR,EAAA,MAAA,CAAK,UAAU,0BAAf,SACI,CAAAX,EAAA,MAAA,CACI,UAAU,yBACV,MAAO,CAAEoB,MAAQ,GAAEJ,EAAmB,MAA/B,CAAA,CAFX,EAIAhB,EAAA,MAAA,CAAK,UAAU,sBAAA,CALnB,CAAA,CAAA,CAVJ,CAAA,CAAA,CADJ,CAoBH,EC5CDqB,GAAe,oLCAfC,GAAe,8LCAAC,GAAA,+ECsBFC,GAA0C,CAAC,CACpDC,eAAAA,EACAC,oBAAAA,EACAC,uBAAAA,EACAC,oBAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,gBAAAA,CARoD,IASlD,CACF,MAAMtC,EAAIC,IACJ,CAACsC,EAAWC,CAAZ,EAA4BC,mBAAS,EAAD,EAEpCC,EAAa,IAAY,CAC3BF,EAAa,CAACD,CAAF,CAAA,EAGhBI,OAAAA,EAAAA,QAAAA,UAAU,KACFJ,EACAF,EAAiBF,GAAoBN,EAArB,EAEDS,IAEZ,IAAM,CACMA,GAAA,GAEpB,CAACH,EAAkBI,EAAWF,EAAkBC,CAAhD,CATM,IAYL,MAAA,CAAK,UAAU,yBAAf,SACI,CAAAhC,EAAA,MAAA,CAAK,UAAU,oBAAf,SAAoCN,EAAE,SAAD,CAAA,CAArC,EACAM,EAAA,MAAA,CAAK,UAAU,0BAAf,WACKX,EAAD,CACI,gBAAiBsC,EACjB,QAASF,EACT,mBAAoBG,EACpB,SAAUE,CAAAA,CAJd,CAAA,CADJ,EAQA9B,EAAA,MAAA,CAAK,UAAU,0BAAf,WACKI,EAAD,CAAQ,OAAM,MAAA,CAAK,IAAK6B,EAAYX,GAAUD,EAAAA,CAA9C,EAA2D,QAASe,EAApE,SACKV,CAAAA,CADL,CAAA,CAXR,CAAA,CAAA,CADJ,CAkBH,EC5BYY,GAAkD,CAAC,CAC5DhC,cAAAA,EACAmB,eAAAA,EACAV,kBAAAA,EACAc,iBAAAA,EACAH,oBAAAA,EACAlB,sBAAAA,EACAmB,uBAAAA,EACAT,0BAAAA,EACAF,iBAAAA,EACAT,mBAAAA,EACAqB,oBAAAA,EACAX,uBAAAA,EACAR,qBAAAA,EACA8B,oBAAAA,EACA7B,gBAAAA,EACAS,oBAAAA,EACAW,iBAAAA,EACAC,iBAAAA,EACAC,gBAAAA,EACAQ,iBAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAC,gBAAAA,EACAC,mBAAAA,CAzB4D,IA0B1D,CACF,MAAMnD,EAAIC,IACV,SACI,MAAA,CAAK,UAAU,8BAAf,SACI,CAAAK,EAAA,MAAA,CAAK,UAAU,8BAAf,SAA8CN,EAAE,aAAD,CAAA,CAA/C,EACAiB,EAAA,MAAA,CAAK,UAAU,8BAAf,SACI,CAAAX,EAAA,MAAA,CAAK,UAAU,+BAAf,WACKK,GAAD,CACI,cAAAC,EACA,qBAAAG,EACA,sBAAAD,EACA,mBAAAD,EACA,gBAAAG,CAAA,CALJ,CAAA,CADJ,EASAC,EAAA,MAAA,CAAK,UAAU,gCAAf,SAAA,CACIX,EAACwB,GAAD,CACI,iBAAAK,EACA,uBAAAF,EACA,oBAAAC,EACA,iBAAAE,EACA,eAAAL,EACA,oBAAAC,EACA,iBAAAK,EACA,gBAAAC,CAAA,CATR,EAWIhC,EAACc,GAAD,CACI,0BAAAI,EACA,uBAAAD,EACA,kBAAAF,EACA,iBAAAC,EACA,oBAAAG,CAAA,CALJ,EAOAR,EAAA,MAAA,CAAK,UAAU,iCAAf,SACI,CAAAX,EAAA,MAAA,CAAK,UAAU,sCAAf,SACKN,EAAE,cAAD,CAAA,CAFV,EAIIM,EAAC8C,EAAD,CAAU,QAASJ,EAAW,QAASE,EAAvC,SACKlD,EAAE,wBAAD,CAAA,CALV,EAOIM,EAAC8C,EAAD,CAAU,QAASH,EAAc,QAASE,EAA1C,SACKnD,EAAE,oBAAD,CAAA,CARV,CAAA,CAAA,CAlBJ,CAAA,CAAA,CAVJ,CAAA,CAAA,CAAA,EAyCAiB,EAAA,MAAA,CAAK,UAAU,6BAAf,SACI,CAAAX,EAAA,MAAA,CAAK,UAAU,+BAAf,WACK8C,EAAD,CAAU,QAASP,EAAqB,QAASC,EAAjD,SACK9C,EAAE,WAAD,CAAA,CADN,CAAA,CADJ,EAKAM,EAAA,MAAA,CAAK,UAAU,6BAAf,WACKI,EAAD,CAAQ,KAAK,UAAU,QAASqC,EAAhC,SACK/C,EAAE,WAAD,CAAA,CADN,CAAA,CAPR,CAAA,CAAA,CA3CJ,CAAA,CAAA,CADJ,CA0DH,EC9GYqD,MAAAA,GAAkBC,EAAS,UAA0B,CAC9D,MAAMC,EAAcC,IACdC,EAAcC,qBAAWC,CAAD,EACxBC,EAAMC,EAAe,WAAD,EACpBC,EAAmBJ,qBAAWK,CAAD,EAC7BC,EAAKC,KAEEC,KAEP,KAAA,CAAEC,SAAAA,GAAaC,EAArB,EAEMrD,EAAuBsD,iBAAuB,IAAjB,EAE7B,CAACzD,EAAe0D,CAAhB,EAAoC7B,EAAAA,QAAAA,SAAoC,CAA5B,CAAA,EAC5C,CAACpB,EAAmBkD,CAApB,EAA4C9B,EAAAA,QAAAA,SAAoC,CAA5B,CAAA,EACpD,CAACV,EAAgByC,CAAjB,EAAsC/B,EAAAA,QAAAA,SAAoC,CAA5B,CAAA,EAE9C,CAACgC,EAAgBC,CAAjB,EAAsCjC,mBAAiB,EAAT,EAC9C,CAACkC,EAAoBC,CAArB,EAA8CnC,mBAAiB,EAAT,EACtD,CAACoC,EAAiBC,CAAlB,EAAwCrC,mBAAiB,EAAT,EAEhD,CAAC5B,EAAoBkE,CAArB,EAA8CtC,mBAAS,EAAD,EACtD,CAAClB,EAAwByD,CAAzB,EAAsDvC,mBAAS,EAAD,EAC9D,CAACP,EAAqB+C,CAAtB,EAAgDxC,mBAAS,EAAD,EAExD,CAACyC,EAAQC,CAAT,EAAsB1C,mBAAS,CAAD,EAEpCE,EAAAA,QAAAA,UAAU,IAAM,CACZ,GAAI,CAACiB,EACD,OAGEwB,MAAAA,EAASxB,EAAIyB,gBACnB,GAAID,EAAQ,CACRA,EAAOE,aAAa,EAApB,EACAF,EAAOG,UAAU,EAAjB,EACOC,EAAAA,WAAWzE,EAAqB0E,OAAvC,EAEMC,MAAAA,EAASC,OAAOC,YAAY,IAAM,CAE1BC,EAAAA,KAAKC,IAAIV,EAAOW,eAAmBF,EAAAA,KAAKG,OAAL,EAAgB,IAAM,CAAzD,CAAD,GACV,EAHY,EAKf,MAAO,IAAM,CACTL,OAAOM,cAAcP,CAArB,EACAN,EAAOE,aAAa,EAApB,EACAF,EAAOG,UAAU,EAAjB,EACAH,EAAOI,WAAW,IAAlB,CAAA,CAEP,CACD,EACD,CAAC5B,EAAK7C,CAAN,CAxBM,EA0BT4B,EAAAA,QAAAA,UAAU,IAAM,CACZ,GAAI,CAACiB,EACD,OAGJ,MAAMsC,EAAuB,IAAY,CACrClC,EAAGJ,EAAIuC,iBAAAA,CAAL,EACGC,KAAgBxG,GAAA,CACb,MAAMgB,EAAgBhB,EAAQyG,OAAOjG,GAAUA,EAAOF,QAAhC,EACtBoE,EAAiB1D,CAAD,EACMA,EAAAA,EAAc0F,OAAS,CAAxB,CAAA,CAJ7B,EAMKC,MAAM,IAAM,CACTxB,EAAsB,EAAD,CAAA,CAP7B,CAAA,EAWEyB,EAAoB,IAAY,CAClCxC,EAAGJ,EAAI6C,cAAAA,CAAL,EACGL,KAAgBxG,GAAA,CACb,MAAMyB,EAAoBzB,EAAQyG,OAAOjG,GAAUA,EAAOF,QAAhC,EAC1BqE,EAAqBlD,CAAD,EACMA,EAAAA,EAAkBiF,OAAS,CAA5B,CAAA,CAJjC,EAMKC,MAAM,IAAM,CACTvB,EAA0B,EAAD,CAAA,CAPjC,CAAA,EAWE0B,EAAwB,IAAY,CACtC1C,EAAGJ,EAAI+C,kBAAAA,CAAL,EACGP,KAAgBxG,GAAA,CACb,MAAMmC,EAAiBnC,EAAQyG,OAAOjG,GAAUA,EAAOF,QAAhC,EACvBsE,EAAkBzC,CAAD,EACSA,EAAAA,EAAeuE,OAAS,CAAzB,CAAA,CAJjC,EAMKC,MAAM,IAAM,CACTtB,EAAuB,EAAD,CAAA,CAP9B,CAAA,EAWE2B,EAAuBhD,EAAIiD,OAAOC,GAAG,iBAAkBZ,CAAhC,EACvBa,EAAqBnD,EAAIiD,OAAOC,GAAG,cAAeN,CAA7B,EACrBQ,EAAyBpD,EAAIiD,OAAOC,GAAG,kBAAmBJ,CAAjC,EAEX,OAAAR,IACHM,IACIE,IAEd,IAAM,CACWE,IACFG,IACIC,GAAA,CACzB,EACF,CAACpD,EAAKI,CAAN,CAtDM,EAwDTrB,EAAAA,QAAAA,UAAU,IAAM,CACRiB,GAAOa,GACFb,EAAIqD,YAAYxC,CAAhB,EAAgC8B,MAAM,IAAM,CAC7CxB,EAAsB,EAAD,CAAA,CADpB,CAGR,EACF,CAACnB,EAAKa,CAAN,CANM,EAQT9B,EAAAA,QAAAA,UAAU,IAAM,CACRiB,GAAOe,GACFf,EAAIsD,SAASvC,CAAb,EAAiC4B,MAAM,IAAM,CAC9CvB,EAA0B,EAAD,CAAA,CADxB,CAGR,EACF,CAACpB,EAAKe,CAAN,CANM,EAQThC,EAAAA,QAAAA,UAAU,IAAM,CACRiB,GAAOiB,GACFjB,EAAIuD,aAAatC,CAAjB,EAAkC0B,MAAM,IAAM,CAC/CtB,EAAuB,EAAD,CAAA,CADrB,CAGR,EACF,CAACrB,EAAKiB,CAAN,CANM,EAQTlC,EAAAA,QAAAA,UAAU,IAAM,CAEZ,GAAI/B,EAAc0F,OAAS,GAAK,CAAC7B,EAAgB,CAC7C,MAAM2C,EAAetD,EAAiBuD,SAClCD,GAAgBxG,EAAc0G,QAAelH,EAAOF,WAAakH,CAAjD,EAChB1C,EAAkB0C,CAAD,EAECxG,EAAAA,EAAc,GAAGV,QAAlB,CAExB,CACF,EAAA,CAAC4D,EAAkBW,EAAgB7D,CAAnC,CAVM,EAYT+B,EAAAA,QAAAA,UAAU,IAAM,CAEZ,GAAItB,EAAkBiF,OAAS,GAAK,CAAC3B,EAAoB,CACrD,MAAM4C,EAAmBzD,EAAiB0D,aAEtCD,GACAlG,EAAkBlB,QAAeC,EAAOF,WAAaqH,CAArD,EAEA3C,EAAsB2C,CAAD,EAEClG,EAAAA,EAAkB,GAAGnB,QAAtB,CAE5B,CACF,EAAA,CAAC4D,EAAkBa,EAAoBtD,CAAvC,CAbM,EAeTsB,EAAAA,QAAAA,UAAU,IAAM,CAEZ,GAAIZ,EAAeuE,OAAS,GAAK,CAACzB,EAAiB,CAC/C,MAAM4C,EAAgB3D,EAAiB4D,UACnCD,GAAiB1F,EAAe5B,QAAeC,EAAOF,WAAauH,CAAlD,EACjB3C,EAAmB2C,CAAD,EAEC1F,EAAAA,EAAe,GAAG7B,QAAnB,CAEzB,CACF,EAAA,CAAC4D,EAAkBe,EAAiB9C,CAApC,CAVM,EAYT,MAAMgB,EAAW,SAA2B,CACxCe,EAAiB6D,eAAelD,CAAhC,EACAX,EAAiB8D,mBAAmBjD,CAApC,EACMkD,MAAAA,GAAgB1D,EAAUZ,CAAX,CAAA,EAGzB,SACI,MAAA,CAAK,UAAU,6BAAf,WACI,MAAA,CAAK,UAAU,wBAAf,WACKX,GAAD,CACI,aAAckB,EAAiBb,aAC/B,UAAWa,EAAiBd,UAC5B,cAAApC,EACA,qBAAAG,EACA,sBAAuB0D,EACvB,0BAA2BE,EAC3B,uBAAwBE,EACxB,mBAAAhE,EACA,uBAAAU,EACA,oBAAAW,EACA,oBAAqBuB,EAAYZ,oBACjC,SAAAE,EACA,kBAAA1B,EACA,iBAAkB6D,EAClB,gBAAiBR,EACjB,oBAAqBE,EACrB,iBAAkBE,EAClB,eAAA/C,EACA,oBAAqB,QACrB,iBAAkB6B,EAAMA,EAAIvB,iBAAmByF,EAC/C,gBAAiBlE,EAAMA,EAAItB,gBAAkBwF,EAC7C,mBAAoB,IAChBhE,EAAiBiE,mBAAmB,CAACjE,EAAiBb,YAAtD,EAEJ,gBAAiB,IACba,EAAiBkE,gBAAgB,CAAClE,EAAiBd,SAAnD,EAEJ,iBAAkBS,EAAYX,gBAAAA,CA5BlC,CAAA,CADJ,CAAA,CAFR,CAoCH,CAtNsC"}