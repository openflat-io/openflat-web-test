{"version":3,"file":"lifecycle.32153b61.js","sources":["../../../../packages/flat-pages/src/utils/hooks/lifecycle.ts"],"sourcesContent":["import { RefObject, useCallback, useEffect, useRef, useState } from \"react\";\nimport { NODE_ENV } from \"../../constants/process\";\n\nexport function useIsUnMounted(): RefObject<boolean> {\n    const isUnMountRef = useRef(false);\n    useEffect(\n        () => () => {\n            isUnMountRef.current = true;\n        },\n        [],\n    );\n    return isUnMountRef;\n}\n\n/**\n * Leave promise unresolved when the component is unmounted.\n * @example\n * ```ts\n * const sp = useSafePromise()\n * setLoading(true)\n * try {\n *   const result1 = await sp(fetchData1())\n *   const result2 = await sp(fetchData2(result1))\n *   setData(result2)\n * } catch(e) {\n *   setHasError(true)\n * }\n * setLoading(false)\n * ```\n */\nexport function useSafePromise(): <T, E = unknown>(\n    promise: PromiseLike<T>,\n    /** When error occurs after the component is unmounted */\n    onUnmountedError?: (error: E) => void,\n) => Promise<T> {\n    const isUnMountRef = useIsUnMounted();\n\n    function safePromise<T, E = unknown>(\n        promise: PromiseLike<T>,\n        onUnmountedError?: (error: E) => void,\n    ): Promise<T> {\n        // the async promise executor is intended\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise(async (resolve, reject) => {\n            try {\n                const result = await promise;\n                if (!isUnMountRef.current) {\n                    resolve(result);\n                }\n                // unresolved promises will be garbage collected.\n            } catch (error) {\n                if (!isUnMountRef.current) {\n                    reject(error);\n                } else if (onUnmountedError) {\n                    onUnmountedError(error as E);\n                } else {\n                    if (NODE_ENV === \"development\") {\n                        console.error(\n                            \"An error occurs from a promise after a component is unmounted\",\n                            error,\n                        );\n                    }\n                }\n            }\n        });\n    }\n\n    return useCallback(safePromise, [isUnMountRef]);\n}\n\nexport function useAPI<P, R>(\n    api: (payload: P) => Promise<R>,\n): {\n    first: boolean;\n    loading: boolean;\n    fetch: (payload: P) => Promise<void>;\n    result: R | null;\n    error: boolean;\n} {\n    const isUnMountRef = useIsUnMounted();\n    const [first, setFirst] = useState(true);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [result, setResult] = useState<R | null>(null);\n    const sp = useSafePromise();\n\n    const fetch = useCallback(\n        async (payload: P) => {\n            if (isUnMountRef.current) {\n                return;\n            }\n            setFirst(false);\n            try {\n                setLoading(true);\n                const result = await sp(api(payload));\n                if (!isUnMountRef.current) {\n                    setResult(result);\n                }\n            } catch {\n                if (!isUnMountRef.current) {\n                    setError(true);\n                }\n            } finally {\n                if (!isUnMountRef.current) {\n                    setLoading(false);\n                }\n            }\n        },\n        // it's wrong for eslint to add `P` to deps\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [api],\n    );\n\n    return { first, loading, fetch, result, error };\n}\n"],"names":["useIsUnMounted","isUnMountRef","useRef","useEffect","useSafePromise","safePromise","promise","onUnmountedError","resolve","reject","result","error","useCallback"],"mappings":"wCAGO,SAASA,GAAqC,CAC3C,MAAAC,EAAeC,iBAAO,EAAK,EACjCC,OAAAA,EAAA,QAAA,UACI,IAAM,IAAM,CACRF,EAAa,QAAU,EAC3B,EACA,CAAC,CAAA,EAEEA,CACX,CAkBO,SAASG,GAIA,CACZ,MAAMH,EAAeD,IAEZ,SAAAK,EACLC,EACAC,EACU,CAGV,OAAO,IAAI,QAAQ,MAAOC,EAASC,IAAW,CACtC,GAAA,CACA,MAAMC,EAAS,MAAMJ,EAChBL,EAAa,SACdO,EAAQE,CAAM,QAGbC,GACAV,EAAa,QAEPM,GACPA,EAAiBI,CAAU,EAF3BF,EAAOE,CAAK,CAWpB,CAAA,CACH,CACL,CAEA,OAAOC,sBAAYP,EAAa,CAACJ,CAAY,CAAC,CAClD"}