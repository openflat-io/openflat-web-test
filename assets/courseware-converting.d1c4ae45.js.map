{"version":3,"file":"courseware-converting.d1c4ae45.js","sources":["../../../../packages/flat-stores/src/utils/courseware-converting.ts"],"sourcesContent":["import Axios from \"axios\";\nimport { Region } from \"flat-components\";\n\nexport interface ConvertingTaskStatus {\n    uuid: string;\n    type: \"static\" | \"dynamic\";\n    status: \"Waiting\" | \"Converting\" | \"Finished\" | \"Fail\" | \"Abort\";\n    errorCode?: string;\n    errorMessage?: string;\n    convertedPercentage?: number;\n    prefix?: string;\n    // TODO: `progress` is for static resources and will be changed in the future.\n    progress?: ConvertingTaskStatusLegacy[\"progress\"];\n}\n\nexport interface ConvertingTaskStatusLegacy {\n    uuid: string;\n    type: \"static\" | \"dynamic\";\n    status: \"Waiting\" | \"Converting\" | \"Finished\" | \"Fail\" | \"Abort\";\n    failedReason?: string;\n    progress?: {\n        totalPageSize: number;\n        convertedPageSize: number;\n        convertedPercentage: number;\n        convertedFileList: Array<{\n            width: number;\n            height: number;\n            conversionFileUrl: string;\n            preview?: string;\n        }>;\n        currentStep: \"Extracting\" | \"Packaging\" | \"GeneratingPreview\" | \"MediaTranscode\";\n    };\n}\n\nexport interface QueryConvertingParams {\n    taskUUID: string;\n    taskToken: string;\n    region: Region;\n    dynamic: boolean;\n    projector: boolean;\n}\n\nexport async function queryConvertingTaskStatus(\n    params: QueryConvertingParams,\n): Promise<ConvertingTaskStatus> {\n    const { taskUUID, taskToken, dynamic, region, projector } = params;\n    if (projector) {\n        const { data } = await Axios.get<ConvertingTaskStatus>(\n            `https://api.netless.link/v5/projector/tasks/${taskUUID}`,\n            { headers: { token: taskToken, region } },\n        );\n        return data;\n    } else {\n        const { data } = await Axios.get<ConvertingTaskStatusLegacy>(\n            `https://api.netless.link/v5/services/conversion/tasks/${taskUUID}?type=${\n                dynamic ? \"dynamic\" : \"static\"\n            }`,\n            { headers: { token: taskToken, region } },\n        );\n        const prefix = data.progress?.convertedFileList?.[0]?.conversionFileUrl || \"\";\n        const index = prefix.lastIndexOf(\"/staticConvert\") + 1;\n        const transformed: ConvertingTaskStatus = {\n            uuid: data.uuid,\n            type: data.type,\n            status: data.status,\n            errorMessage: data.failedReason,\n            convertedPercentage: data.progress?.convertedPercentage,\n            prefix: prefix ? prefix.slice(0, index) : undefined,\n            progress: data.progress,\n        };\n        return transformed;\n    }\n}\n\nexport async function getZipData({\n    baseURL,\n    pptType,\n    taskUUID,\n}: {\n    baseURL: string;\n    pptType: \"static\" | \"dynamic\";\n    taskUUID: string;\n}): Promise<Blob> {\n    const { data } = await Axios.get<Blob>(`${baseURL}/${pptType}Convert/${taskUUID}.zip`, {\n        responseType: \"blob\",\n    });\n\n    return data;\n}\n"],"names":["queryConvertingTaskStatus","params","taskUUID","taskToken","dynamic","region","projector","data","Axios","prefix","_c","_b","_a","index","_d","getZipData","baseURL","pptType"],"mappings":"yCA0CA,eAAsBA,EAClBC,EAC6B,aAC7B,KAAM,CAAE,SAAAC,EAAU,UAAAC,EAAW,QAAAC,EAAS,OAAAC,EAAQ,UAAAC,CAAc,EAAAL,EAC5D,GAAIK,EAAW,CACX,KAAM,CAAE,KAAAC,CAAA,EAAS,MAAMC,EAAM,IACzB,+CAA+CN,IAC/C,CAAE,QAAS,CAAE,MAAOC,EAAW,OAAAE,EAAS,CAAA,EAErC,OAAAE,CAAA,KACJ,CACH,KAAM,CAAE,KAAAA,CAAA,EAAS,MAAMC,EAAM,IACzB,yDAAyDN,UACrDE,EAAU,UAAY,WAE1B,CAAE,QAAS,CAAE,MAAOD,EAAW,OAAAE,EAAS,CAAA,EAEtCI,IAASC,GAAAC,GAAAC,EAAAL,EAAK,WAAL,YAAAK,EAAe,oBAAf,YAAAD,EAAmC,KAAnC,YAAAD,EAAuC,oBAAqB,GACrEG,EAAQJ,EAAO,YAAY,gBAAgB,EAAI,EAU9C,MATmC,CACtC,KAAMF,EAAK,KACX,KAAMA,EAAK,KACX,OAAQA,EAAK,OACb,aAAcA,EAAK,aACnB,qBAAqBO,EAAAP,EAAK,WAAL,YAAAO,EAAe,oBACpC,OAAQL,EAASA,EAAO,MAAM,EAAGI,CAAK,EAAI,OAC1C,SAAUN,EAAK,QAAA,CAGvB,CACJ,CAEA,eAAsBQ,EAAW,CAC7B,QAAAC,EACA,QAAAC,EACA,SAAAf,CACJ,EAIkB,CACR,KAAA,CAAE,KAAAK,CAAS,EAAA,MAAMC,EAAM,IAAU,GAAGQ,KAAWC,YAAkBf,QAAgB,CACnF,aAAc,MAAA,CACjB,EAEM,OAAAK,CACX"}