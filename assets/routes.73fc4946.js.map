{"version":3,"file":"routes.73fc4946.js","sources":["../../../../packages/flat-server-api/src/login.ts","../../../../packages/flat-components/src/utils/errorTip.ts","../../../../packages/flat-pages/src/utils/routes.ts"],"sourcesContent":["import { Status } from \"./constants\";\nimport { post, postNotAuth, requestFlatServer } from \"./utils\";\n\nexport interface LoginCheckPayload {}\n\nexport interface LoginCheckResult {\n    name: string;\n    avatar: string;\n    token: string;\n    userUUID: string;\n    hasPhone: boolean;\n}\n\nexport async function loginCheck(token?: string): Promise<LoginCheckResult> {\n    return await post<LoginCheckPayload, LoginCheckResult>(\"login\", {}, {}, token);\n}\n\nexport interface setAuthUUIDPayload {\n    authUUID: string;\n}\n\nexport interface setAuthUUIDResult {\n    authUUID: string;\n}\n\nexport async function setAuthUUID(authUUID: string): Promise<setAuthUUIDResult> {\n    return await postNotAuth<setAuthUUIDPayload, setAuthUUIDResult>(\"login/set-auth-uuid\", {\n        authUUID,\n    });\n}\n\nexport interface LoginProcessPayload {\n    authUUID: string;\n}\n\nexport interface LoginProcessResult {\n    name: string;\n    avatar: string;\n    userUUID: string;\n    token: string;\n    hasPhone: boolean;\n    agoraSSOLoginID?: string;\n}\n\nexport async function loginProcess(authUUID: string): Promise<LoginProcessResult> {\n    return await postNotAuth<LoginProcessPayload, LoginProcessResult>(\"login/process\", {\n        authUUID,\n    });\n}\n\nexport interface AgoraSSOLoginCheckPayload {\n    loginID: string;\n}\n\nexport interface AgoraSSOLoginCheckResult {\n    jwtToken: string;\n}\n\n// Only Web\nexport async function agoraSSOLoginCheck(loginID: string): Promise<AgoraSSOLoginCheckResult> {\n    return await postNotAuth<AgoraSSOLoginCheckPayload, AgoraSSOLoginCheckResult>(\n        \"login/agora/check\",\n        {\n            loginID,\n        },\n    );\n}\n\nexport interface LoginPhoneSendCodePayload {\n    phone: string; // +8612345678901\n}\n\nexport type LoginPhoneSendCodeResult = {};\n\nexport async function loginPhoneSendCode(phone: string): Promise<LoginPhoneSendCodeResult> {\n    return await postNotAuth<LoginPhoneSendCodePayload, LoginPhoneSendCodeResult>(\n        \"login/phone/sendMessage\",\n        {\n            phone,\n        },\n    );\n}\n\nexport interface LoginPhonePayload {\n    phone: string; // +8612345678901\n    code: number; // 123456\n}\n\nexport async function loginPhone(phone: string, code: number): Promise<LoginProcessResult> {\n    return await postNotAuth<LoginPhonePayload, LoginProcessResult>(\"login/phone\", {\n        phone,\n        code,\n    });\n}\n\nexport interface BindingPhoneSendCodePayload {\n    phone: string; // +8612345678901\n}\n\nexport type BindingPhoneSendCodeResult = {};\n\nexport async function bindingPhoneSendCode(phone: string): Promise<BindingPhoneSendCodeResult> {\n    return await post<BindingPhoneSendCodePayload, BindingPhoneSendCodeResult>(\n        \"user/bindingPhone/sendMessage\",\n        {\n            phone,\n        },\n    );\n}\n\nexport interface BindingPhonePayload {\n    phone: string; // +8612345678901\n    code: number; // 123456\n}\n\nexport type BindingPhoneResult = {};\n\nexport async function bindingPhone(phone: string, code: number): Promise<BindingPhoneResult> {\n    return await post<BindingPhonePayload, BindingPhoneResult>(\"user/bindingPhone\", {\n        phone,\n        code,\n    });\n}\n\nexport interface ListBindingsPayload {}\n\nexport interface ListBindingsResult {\n    wechat: boolean;\n    phone: boolean;\n    agora: boolean;\n    apple: boolean;\n    github: boolean;\n    google: boolean;\n}\n\nexport async function listBindings(): Promise<ListBindingsResult> {\n    return await post<ListBindingsPayload, ListBindingsResult>(\"user/binding/list\", {});\n}\n\nexport interface SetBindingAuthUUIDPayload {\n    authUUID: string;\n}\n\nexport interface SetBindingAuthUUIDResult {}\n\nexport async function setBindingAuthUUID(authUUID: string): Promise<void> {\n    await post<SetBindingAuthUUIDPayload, SetBindingAuthUUIDResult>(\"user/binding/set-auth-uuid\", {\n        authUUID,\n    });\n}\n\nexport interface BindingProcessPayload {\n    authUUID: string;\n}\n\nexport interface BindingProcessResult {\n    processing: boolean;\n    status: boolean;\n}\n\nexport async function bindingProcess(authUUID: string): Promise<BindingProcessResult> {\n    try {\n        const ret = await requestFlatServer<BindingProcessPayload, {}>(\"user/binding/process\", {\n            authUUID,\n        });\n        if (ret.status === Status.Process) {\n            return {\n                processing: true,\n                status: false,\n            };\n        }\n        return {\n            processing: false,\n            status: true,\n        };\n    } catch {\n        return {\n            processing: false,\n            status: false,\n        };\n    }\n}\n\nexport enum LoginPlatform {\n    WeChat = \"WeChat\",\n    Github = \"Github\",\n    Apple = \"Apple\",\n    Agora = \"Agora\",\n    Google = \"Google\",\n    Phone = \"Phone\",\n}\n\nexport interface RemoveBindingPayload {\n    target: LoginPlatform;\n}\n\nexport interface RemoveBindingResult {\n    token: string;\n}\n\nexport async function removeBinding(target: LoginPlatform): Promise<RemoveBindingResult> {\n    return await post<RemoveBindingPayload, RemoveBindingResult>(\"user/binding/remove\", {\n        target,\n    });\n}\n\nexport interface DeleteAccountValidateResult {\n    alreadyJoinedRoomCount: number;\n}\n\nexport async function deleteAccountValidate(): Promise<DeleteAccountValidateResult> {\n    return await post<{}, DeleteAccountValidateResult>(\"user/deleteAccount/validate\", {});\n}\n\nexport async function deleteAccount(): Promise<void> {\n    await post<{}, {}>(\"user/deleteAccount\", {});\n}\n","import { message } from \"antd\";\nimport { isServerRequestError } from \"@netless/flat-server-api\";\nimport { FlatI18n } from \"@netless/flat-i18n\";\n\nexport const errorTips = (e: unknown): void => {\n    if (process.env.NODE_ENV === \"development\") {\n        console.error(e);\n    }\n\n    if (isServerRequestError(e)) {\n        if (e.errorMessage) {\n            void message.error({\n                content: FlatI18n.t(e.errorMessage),\n                key: e.errorCode,\n            });\n        } else {\n            void message.error({\n                content: FlatI18n.t(\"error-code-error\", { code: `${e.errorCode}` }),\n                key: e.errorCode,\n            });\n        }\n    } else if ((e as Error).message) {\n        const { message: content, message: key } = e as Error;\n        void message.error({ content, key });\n    } else {\n        void message.error({ content: FlatI18n.t(\"unknown-error\"), key: \"unknown\" });\n    }\n};\n","import { routeConfig, RouteConfig, RouteNameType, ExtraRouteConfig } from \"../route-config\";\nimport { generatePath, useHistory } from \"react-router-dom\";\nimport { useCallback, useMemo } from \"react\";\n\nexport { RouteNameType } from \"../route-config\";\n\ntype PickExtraRouteConfig<\n    T extends RouteNameType,\n    K extends string,\n> = T extends keyof ExtraRouteConfig\n    ? K extends keyof ExtraRouteConfig[T]\n        ? ExtraRouteConfig[T][K]\n        : string\n    : string;\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * Inspired by {@link https://github.com/ghoullier/awesome-template-literal-types#router-params-parsing}\n * Supports optional params\n */\ntype ExtractRouteParams<T extends RouteNameType, P extends string> = string extends P\n    ? Record<string, string>\n    : P extends `${infer _Start}:${infer Param}/${infer Rest}`\n    ? Param extends `${infer Param}?`\n        ? { [k in Param]?: PickExtraRouteConfig<T, k> } & ExtractRouteParams<T, Rest>\n        : { [k in Param]: PickExtraRouteConfig<T, k> } & ExtractRouteParams<T, Rest>\n    : P extends `${infer _Start}:${infer Param}`\n    ? Param extends `${infer Param}?`\n        ? { [k in Param]?: PickExtraRouteConfig<T, k> }\n        : { [k in Param]: PickExtraRouteConfig<T, k> }\n    : {};\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\nexport type RouteParams<T extends RouteNameType> = ExtractRouteParams<T, RouteConfig[T][\"path\"]>;\n\nexport function generateRoutePath<T extends RouteNameType>(\n    name: T,\n    params?: RouteParams<T>,\n): string {\n    return generatePath(routeConfig[name].path, params);\n}\n\n/**\n * Push history with Flat route\n */\nexport function usePushHistory(): <T extends RouteNameType>(\n    name: T,\n    params?: RouteParams<T>,\n) => void {\n    const history = useHistory();\n\n    const pushHistory = useCallback(\n        (name: RouteNameType, params: RouteParams<RouteNameType> = {}) => {\n            history.push(generateRoutePath(name, params));\n        },\n        [history],\n    );\n\n    return pushHistory;\n}\n\n/**\n * Replace history with Flat route\n */\nexport function useReplaceHistory(): <T extends RouteNameType>(\n    name: T,\n    params?: RouteParams<T>,\n) => void {\n    const history = useHistory();\n\n    const pushHistory = useCallback(\n        (name: RouteNameType, params: RouteParams<RouteNameType> = {}) => {\n            history.replace(generateRoutePath(name, params));\n        },\n        [history],\n    );\n\n    return pushHistory;\n}\n\n/**\n * Get url parameters\n * This facility not involves react-router, so you can use it simply.\n */\nexport function useURLParams(): Record<string, string> {\n    const urlSearchParams = useMemo(\n        () => new URLSearchParams(window.location.search),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [window.location.search],\n    );\n\n    const params = useMemo(() => {\n        const res: Record<string, string> = {};\n        for (const [key, value] of urlSearchParams.entries()) {\n            res[key] = value;\n        }\n        return res;\n    }, [urlSearchParams]);\n\n    return params;\n}\n"],"names":["loginCheck","token","post","setAuthUUID","authUUID","postNotAuth","loginProcess","loginPhoneSendCode","phone","loginPhone","code","bindingPhoneSendCode","bindingPhone","listBindings","setBindingAuthUUID","bindingProcess","requestFlatServer","Status","LoginPlatform","removeBinding","target","deleteAccountValidate","deleteAccount","errorTips","isServerRequestError","message","FlatI18n","content","key","generateRoutePath","name","params","generatePath","routeConfig","usePushHistory","history","useHistory","useCallback","useReplaceHistory","useURLParams","urlSearchParams","useMemo","res","value"],"mappings":"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"}