{"version":3,"file":"index.2a874865.js","sources":["../../../../packages/flat-pages/src/OneToOnePage/index.tsx"],"sourcesContent":["import \"./OneToOnePage.less\";\n\nimport React, { useContext, useState } from \"react\";\nimport { useTranslate } from \"@netless/flat-i18n\";\nimport { observer } from \"mobx-react-lite\";\nimport { message } from \"antd\";\nimport {\n    NetworkStatus,\n    RoomInfo,\n    TopBar,\n    TopBarRightBtn,\n    TopBarDivider,\n    Timer,\n    CloudRecordBtn,\n    SVGScreenSharing,\n    SVGExit,\n    SVGMenuFold,\n    SVGMenuUnfold,\n} from \"flat-components\";\n\nimport InviteButton from \"../components/InviteButton\";\nimport { RealtimePanel } from \"../components/RealtimePanel\";\nimport { ChatPanel } from \"../components/ChatPanel\";\nimport { RTCAvatar } from \"../components/RTCAvatar\";\nimport {\n    ExitRoomConfirm,\n    ExitRoomConfirmType,\n    useExitRoomConfirmModal,\n} from \"../components/ExitRoomConfirm\";\nimport { Whiteboard } from \"../components/Whiteboard\";\nimport { RoomStatusStoppedModal } from \"../components/ClassRoom/RoomStatusStoppedModal\";\nimport { CloudStorageButton } from \"../components/CloudStorageButton\";\nimport { ShareScreen } from \"../components/ShareScreen\";\nimport { useLoginCheck } from \"../utils/use-login-check\";\nimport { withClassroomStore, WithClassroomStoreProps } from \"../utils/with-classroom-store\";\nimport { WindowsSystemBtnContext } from \"../components/StoreProvider\";\nimport { ShareScreenPicker } from \"../components/ShareScreen/ShareScreenPicker\";\nimport { ExtraPadding } from \"../components/ExtraPadding\";\nimport { UsersButton } from \"../components/UsersButton\";\n\nexport type OneToOnePageProps = {};\n\nexport const OneToOnePage = withClassroomStore<OneToOnePageProps>(\n    observer<WithClassroomStoreProps<OneToOnePageProps>>(function OneToOnePage({ classroomStore }) {\n        useLoginCheck();\n\n        const t = useTranslate();\n\n        const whiteboardStore = classroomStore.whiteboardStore;\n        const windowsBtn = useContext(WindowsSystemBtnContext);\n\n        const { confirm, ...exitConfirmModalProps } = useExitRoomConfirmModal(classroomStore);\n\n        const [isRealtimeSideOpen, openRealtimeSide] = useState(true);\n\n        return (\n            <div className=\"one-to-one-class-page-container\">\n                <div className=\"one-to-one-realtime-container\">\n                    <div className=\"one-to-one-realtime-box\">\n                        {windowsBtn ? (\n                            <TopBar\n                                left={renderTopBarLeft()}\n                                right={renderTopBarRight()}\n                                showWindowsSystemBtn={windowsBtn.showWindowsBtn}\n                                onClickWindowsSystemBtn={windowsBtn.onClickWindowsSystemBtn}\n                                onDoubleClick={windowsBtn.clickWindowMaximize}\n                            />\n                        ) : (\n                            <TopBar left={renderTopBarLeft()} right={renderTopBarRight()} />\n                        )}\n                        <div className=\"one-to-one-realtime-content\">\n                            <div className=\"one-to-one-realtime-content-container\">\n                                <ShareScreen classroomStore={classroomStore} />\n                                <ShareScreenPicker\n                                    classroomStore={classroomStore}\n                                    handleOk={() => classroomStore.toggleShareScreen(true)}\n                                />\n                                <Whiteboard\n                                    classRoomStore={classroomStore}\n                                    whiteboardStore={whiteboardStore}\n                                />\n                            </div>\n                            {renderRealtimePanel()}\n                        </div>\n                        <ExitRoomConfirm\n                            isCreator={classroomStore.isCreator}\n                            {...exitConfirmModalProps}\n                        />\n                        <RoomStatusStoppedModal\n                            isCreator={classroomStore.isCreator}\n                            isRemoteLogin={classroomStore.isRemoteLogin}\n                            roomStatus={classroomStore.roomStatus}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n\n        function renderTopBarLeft(): React.ReactNode {\n            return (\n                <>\n                    <ExtraPadding />\n                    <NetworkStatus networkQuality={classroomStore.networkQuality} />\n                    {classroomStore.isCreator ? (\n                        classroomStore.roomInfo?.beginTime && (\n                            <Timer\n                                beginTime={classroomStore.roomInfo.beginTime}\n                                roomStatus={classroomStore.roomStatus}\n                            />\n                        )\n                    ) : (\n                        <RoomInfo\n                            roomStatus={classroomStore.roomStatus}\n                            roomType={classroomStore.roomInfo?.roomType}\n                        />\n                    )}\n                </>\n            );\n        }\n\n        function renderTopBarRight(): React.ReactNode {\n            return (\n                <>\n                    {whiteboardStore.allowDrawing && !classroomStore.isRemoteScreenSharing && (\n                        <TopBarRightBtn\n                            icon={<SVGScreenSharing active={classroomStore.isScreenSharing} />}\n                            title={t(\"share-screen.self\")}\n                            onClick={() => {\n                                if (window.isElectron) {\n                                    if (classroomStore.isScreenSharing) {\n                                        classroomStore.toggleShareScreen(false);\n                                    } else {\n                                        classroomStore.toggleShareScreenPicker(true);\n                                    }\n                                } else {\n                                    classroomStore.toggleShareScreen();\n                                }\n                            }}\n                        />\n                    )}\n\n                    {classroomStore.isCreator && (\n                        <CloudRecordBtn\n                            isRecording={classroomStore.isRecording}\n                            loading={classroomStore.isRecordingLoading}\n                            onClick={() => {\n                                void classroomStore.toggleRecording({\n                                    onStop() {\n                                        void message.success(t(\"recording-completed-tips\"));\n                                    },\n                                });\n                            }}\n                        />\n                    )}\n                    {classroomStore.whiteboardStore.allowDrawing && (\n                        <CloudStorageButton classroom={classroomStore} />\n                    )}\n                    <InviteButton roomInfo={classroomStore.roomInfo} />\n                    {/* TODO: open users sub window */}\n                    <UsersButton classroom={classroomStore} />\n                    {!windowsBtn?.showWindowsBtn && (\n                        <TopBarRightBtn\n                            icon={<SVGExit />}\n                            title={t(\"exit\")}\n                            onClick={() => confirm(ExitRoomConfirmType.ExitButton)}\n                        />\n                    )}\n                    {windowsBtn?.showWindowsBtn ? null : <TopBarDivider />}\n                    <TopBarRightBtn\n                        icon={isRealtimeSideOpen ? <SVGMenuUnfold /> : <SVGMenuFold />}\n                        title={isRealtimeSideOpen ? t(\"side-panel.hide\") : t(\"side-panel.show\")}\n                        onClick={handleSideOpenerSwitch}\n                    />\n                    {windowsBtn?.showWindowsBtn && <TopBarDivider />}\n                </>\n            );\n        }\n\n        function renderRealtimePanel(): React.ReactNode {\n            return (\n                <RealtimePanel\n                    chatSlot={<ChatPanel classRoomStore={classroomStore} />}\n                    isShow={isRealtimeSideOpen}\n                    isVideoOn={classroomStore.isJoinedRTC}\n                    videoSlot={\n                        <div className=\"one-to-one-rtc-avatar-container\">\n                            <RTCAvatar\n                                avatarUser={classroomStore.users.creator}\n                                getPortal={classroomStore.getPortal}\n                                isAvatarUserCreator={true}\n                                isCreator={classroomStore.isCreator}\n                                isDropTarget={classroomStore.isDropTarget(classroomStore.ownerUUID)}\n                                rtcAvatar={\n                                    classroomStore.users.creator &&\n                                    classroomStore.rtc.getAvatar(\n                                        classroomStore.users.creator.rtcUID,\n                                    )\n                                }\n                                updateDeviceState={classroomStore.updateDeviceState}\n                                userUUID={classroomStore.userUUID}\n                                onDoubleClick={() =>\n                                    classroomStore.createMaximizedAvatarWindow(\n                                        classroomStore.ownerUUID,\n                                    )\n                                }\n                                onDragEnd={classroomStore.onDragEnd}\n                                onDragStart={classroomStore.onDragStart}\n                            />\n                            {classroomStore.firstOnStageUser && (\n                                <RTCAvatar\n                                    avatarUser={classroomStore.firstOnStageUser}\n                                    getPortal={classroomStore.getPortal}\n                                    isAvatarUserCreator={false}\n                                    isCreator={classroomStore.isCreator}\n                                    isDropTarget={\n                                        classroomStore.firstOnStageUser &&\n                                        classroomStore.isDropTarget(\n                                            classroomStore.firstOnStageUser.userUUID,\n                                        )\n                                    }\n                                    rtcAvatar={\n                                        classroomStore.firstOnStageUser &&\n                                        classroomStore.rtc.getAvatar(\n                                            classroomStore.firstOnStageUser.rtcUID,\n                                        )\n                                    }\n                                    updateDeviceState={classroomStore.updateDeviceState}\n                                    userUUID={classroomStore.userUUID}\n                                    onDoubleClick={() =>\n                                        classroomStore.firstOnStageUser &&\n                                        classroomStore.createMaximizedAvatarWindow(\n                                            classroomStore.firstOnStageUser.userUUID,\n                                        )\n                                    }\n                                    onDragEnd={classroomStore.onDragEnd}\n                                    onDragStart={classroomStore.onDragStart}\n                                />\n                            )}\n                        </div>\n                    }\n                />\n            );\n        }\n\n        function handleSideOpenerSwitch(): void {\n            openRealtimeSide(isRealtimeSideOpen => !isRealtimeSideOpen);\n            whiteboardStore.setRightSideClose(isRealtimeSideOpen);\n        }\n    }),\n);\n\nexport default OneToOnePage;\n"],"names":["OneToOnePage","withClassroomStore","observer","classroomStore","useLoginCheck","t","useTranslate","whiteboardStore","windowsBtn","useContext","WindowsSystemBtnContext","confirm","exitConfirmModalProps","useExitRoomConfirmModal","isRealtimeSideOpen","openRealtimeSide","useState","_jsx","TopBar","renderTopBarLeft","renderTopBarRight","showWindowsBtn","onClickWindowsSystemBtn","clickWindowMaximize","_jsxs","ShareScreen","ShareScreenPicker","toggleShareScreen","Whiteboard","renderRealtimePanel","ExitRoomConfirm","isCreator","RoomStatusStoppedModal","isRemoteLogin","roomStatus","_Fragment","ExtraPadding","NetworkStatus","networkQuality","roomInfo","beginTime","Timer","RoomInfo","roomType","allowDrawing","isRemoteScreenSharing","TopBarRightBtn","SVGScreenSharing","isScreenSharing","window","isElectron","toggleShareScreenPicker","CloudRecordBtn","isRecording","isRecordingLoading","toggleRecording","onStop","message","success","CloudStorageButton","InviteButton","UsersButton","SVGExit","ExitRoomConfirmType","ExitButton","TopBarDivider","SVGMenuUnfold","SVGMenuFold","handleSideOpenerSwitch","RealtimePanel","ChatPanel","isJoinedRTC","RTCAvatar","users","creator","getPortal","isDropTarget","ownerUUID","rtc","getAvatar","rtcUID","updateDeviceState","userUUID","createMaximizedAvatarWindow","onDragEnd","onDragStart","firstOnStageUser","setRightSideClose"],"mappings":"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"}