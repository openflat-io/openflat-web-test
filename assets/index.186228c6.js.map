{"version":3,"file":"index.186228c6.js","sources":["../../../../packages/flat-pages/src/ResourcePreviewPage/DynamicPreview.tsx","../../../../packages/flat-pages/src/ResourcePreviewPage/utils.ts","../../../../packages/flat-pages/src/ResourcePreviewPage/MediaPreview.tsx","../../../../packages/flat-pages/src/ResourcePreviewPage/StaticPreview.tsx","../../../../packages/flat-pages/src/ResourcePreviewPage/index.tsx"],"sourcesContent":["import \"./DynamicPreview.less\";\n\nimport React, { useEffect, useRef } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Region } from \"flat-components\";\nimport { previewSlide, SlideViewer } from \"@netless/app-slide\";\nimport { queryConvertingTaskStatus } from \"@netless/flat-stores\";\nimport { useSafePromise } from \"../utils/hooks/lifecycle\";\n\nexport interface DynamicPreviewProps {\n    taskUUID: string;\n    taskToken: string;\n    region: Region;\n    projector: boolean;\n}\n\nexport const DynamicPreview = observer<DynamicPreviewProps>(function PPTPreview({\n    taskUUID,\n    taskToken,\n    region,\n    projector,\n}) {\n    const previewer = useRef<SlideViewer | null>(null);\n    const DynamicPreviewRef = useRef<HTMLDivElement>(null);\n    const sp = useSafePromise();\n\n    useEffect(() => {\n        async function getDynamicResource(): Promise<void> {\n            const convertState = await sp(\n                queryConvertingTaskStatus({\n                    taskUUID,\n                    taskToken,\n                    dynamic: true,\n                    region,\n                    projector,\n                }),\n            );\n\n            if (DynamicPreviewRef.current) {\n                previewer.current = previewSlide({\n                    container: DynamicPreviewRef.current,\n                    taskId: convertState.uuid,\n                    url:\n                        convertState.prefix ||\n                        extractSlideUrlPrefix(\n                            convertState.progress?.convertedFileList[0].conversionFileUrl,\n                        ),\n                });\n            }\n        }\n\n        getDynamicResource().catch(console.warn);\n\n        return () => {\n            if (previewer.current) {\n                previewer.current.destroy();\n                previewer.current = null;\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div ref={DynamicPreviewRef} className=\"dynamic-preview-container\"></div>;\n});\n\nfunction extractSlideUrlPrefix(fullUrl?: string): string | undefined {\n    if (!fullUrl || !fullUrl.startsWith(\"ppt\")) {\n        return undefined;\n    }\n\n    // e.g. \"ppt(x)://cdn/prefix/dynamicConvert/{taskId}/1.slide\"\n    const pptSrcRE = /^pptx?(?<prefix>:\\/\\/\\S+?dynamicConvert)\\/(?<taskId>\\w+)\\//;\n\n    const match = pptSrcRE.exec(fullUrl);\n    if (!match || !match.groups) {\n        return undefined;\n    }\n\n    return \"https\" + match.groups.prefix;\n}\n","export function getFileSuffix(path: string): string {\n    return (/\\.[a-z1-9]+$/i.exec(path) || [\"\"])[0].toLowerCase();\n}\n","import \"./MediaPreview.less\";\n\nimport React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { getFileSuffix } from \"./utils\";\n\nexport interface MediaPreviewProps {\n    fileURL: string;\n}\n\nexport const MediaPreview = observer<MediaPreviewProps>(function PPTPreview({ fileURL }) {\n    const mediaFileURL = decodeURIComponent(fileURL);\n\n    const mediaFileSuffix = getFileSuffix(mediaFileURL);\n\n    return <div className=\"media-preview-container\">{renderMediaPreview()}</div>;\n\n    function renderMediaPreview(): React.ReactElement {\n        switch (mediaFileSuffix) {\n            case \".mp3\": {\n                return (\n                    <div className=\"audio-container\">\n                        <audio controls src={mediaFileURL} />\n                    </div>\n                );\n            }\n            case \".jpg\":\n            case \".jpeg\":\n            case \".png\": {\n                return (\n                    <div className=\"img-container\">\n                        <img alt=\"img resource\" src={mediaFileURL} />\n                    </div>\n                );\n            }\n\n            default: {\n                return <video controls src={mediaFileURL} />;\n            }\n        }\n    }\n});\n","import \"./StaticPreview.less\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { Region } from \"flat-components\";\nimport React, { useEffect, useState } from \"react\";\nimport { queryConvertingTaskStatus } from \"@netless/flat-stores\";\nimport { useSafePromise } from \"../utils/hooks/lifecycle\";\n\nexport interface StaticPreviewProps {\n    taskUUID: string;\n    taskToken: string;\n    region: Region;\n}\n\ntype ConvertedFileList =\n    | Array<{\n          width: number;\n          height: number;\n          conversionFileUrl: string;\n          preview?: string | undefined;\n      }>\n    | undefined;\n\nexport const StaticPreview = observer<StaticPreviewProps>(function DocumentPreview({\n    taskUUID,\n    taskToken,\n    region,\n}) {\n    const [convertList, setConvertList] = useState<ConvertedFileList>([]);\n    const sp = useSafePromise();\n\n    useEffect(() => {\n        async function getStaticResource(): Promise<void> {\n            const convertResult = await sp(\n                queryConvertingTaskStatus({\n                    taskUUID,\n                    taskToken,\n                    dynamic: false,\n                    region,\n                    projector: false,\n                }),\n            );\n\n            setConvertList(convertResult.progress?.convertedFileList);\n        }\n\n        getStaticResource().catch(console.warn);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className=\"static-preview-container\">\n            <div className=\"static-preview-list\">\n                {convertList?.map(file => {\n                    return (\n                        <img\n                            key={file.conversionFileUrl}\n                            className=\"static-preview-item\"\n                            src={file.conversionFileUrl}\n                        ></img>\n                    );\n                })}\n            </div>\n        </div>\n    );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useParams } from \"react-router-dom\";\nimport { RouteNameType, RouteParams } from \"../utils/routes\";\nimport { DynamicPreview } from \"./DynamicPreview\";\nimport { MediaPreview } from \"./MediaPreview\";\nimport { StaticPreview } from \"./StaticPreview\";\nimport { ErrorPage, Region } from \"flat-components\";\nimport { getFileSuffix } from \"./utils\";\n\nexport interface ResourcePreviewPagePageProps {}\n\nexport const ResourcePreviewPage = observer<ResourcePreviewPagePageProps>(\n    function ResourcePreviewPage() {\n        const { fileURL, taskToken, taskUUID, region, projector } =\n            useParams<RouteParams<RouteNameType.ResourcePreviewPage>>();\n\n        const decodeFileName = decodeURIComponent(fileURL);\n\n        return <div className=\"cloud-storage-preview-container\">{renderPreviewComponent()}</div>;\n\n        function renderPreviewComponent(): React.ReactElement {\n            const fileSuffix = getFileSuffix(decodeFileName);\n\n            switch (fileSuffix) {\n                case \".pptx\": {\n                    if (taskUUID && taskToken) {\n                        return (\n                            <DynamicPreview\n                                projector={projector === \"projector\"}\n                                region={region as Region}\n                                taskToken={taskToken}\n                                taskUUID={taskUUID}\n                            />\n                        );\n                    }\n                    return <ErrorPage />;\n                }\n                case \".ppt\":\n                case \".pdf\":\n                case \".doc\":\n                case \".docx\": {\n                    if (taskUUID && taskToken) {\n                        return (\n                            <StaticPreview\n                                region={region as Region}\n                                taskToken={taskToken}\n                                taskUUID={taskUUID}\n                            />\n                        );\n                    }\n                    return <ErrorPage />;\n                }\n\n                default: {\n                    return <MediaPreview fileURL={fileURL} />;\n                }\n            }\n        }\n    },\n);\n\nexport default ResourcePreviewPage;\n"],"names":["DynamicPreview","observer","taskUUID","taskToken","region","projector","previewer","useRef","DynamicPreviewRef","sp","useSafePromise","useEffect","getDynamicResource","convertState","queryConvertingTaskStatus","dynamic","current","previewSlide","container","taskId","uuid","url","prefix","extractSlideUrlPrefix","progress","convertedFileList","conversionFileUrl","catch","console","warn","destroy","fullUrl","startsWith","undefined","match","exec","groups","getFileSuffix","path","MediaPreview","fileURL","mediaFileURL","decodeURIComponent","mediaFileSuffix","renderMediaPreview","StaticPreview","convertList","setConvertList","useState","getStaticResource","convertResult","map","file","ResourcePreviewPage","useParams","decodeFileName","renderPreviewComponent","_jsx","ErrorPage"],"mappings":"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"}