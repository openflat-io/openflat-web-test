{"version":3,"file":"index.55e24a72.js","sources":["../../../../service-providers/file-convert-netless/src/index.ts"],"sourcesContent":["import {\n    convertStart,\n    FileConvertStep,\n    FileResourceType,\n    ServerRequestError,\n} from \"@netless/flat-server-api\";\nimport { IServiceFileConvert, IServiceFileConvertStatus, CloudFile } from \"@netless/flat-services\";\nimport { queryConvertingTaskStatus } from \"./courseware-converting\";\nimport { isPPTX } from \"./utils\";\n\nexport * from \"./courseware-converting\";\nexport * from \"./utils\";\n\nexport class FileConvertNetless implements IServiceFileConvert {\n    public async startConvert(\n        file: CloudFile,\n    ): Promise<\n        { taskUUID: string; taskToken: string; resourceType: FileResourceType } | undefined\n    > {\n        const convertResult = await convertStart({\n            fileUUID: file.fileUUID,\n        });\n        const { resourceType, whiteboardProjector, whiteboardConvert } = convertResult;\n\n        if (whiteboardProjector) {\n            const { taskUUID, taskToken } = whiteboardProjector;\n            return {\n                taskUUID,\n                taskToken,\n                resourceType,\n            };\n        }\n\n        if (whiteboardConvert) {\n            const { taskUUID, taskToken } = whiteboardConvert;\n            return {\n                taskUUID,\n                taskToken,\n                resourceType,\n            };\n        }\n\n        return;\n    }\n\n    public async queryStatus(file: CloudFile): Promise<IServiceFileConvertStatus> {\n        if (\n            file.resourceType === FileResourceType.WhiteboardConvert ||\n            file.resourceType === FileResourceType.WhiteboardProjector\n        ) {\n            const convertingStatus = await queryConvertingTaskStatus({\n                dynamic: isPPTX(file.fileName),\n                resourceType: file.resourceType,\n                meta: file.meta,\n            });\n\n            if (convertingStatus.status === \"Fail\") {\n                let error: Error;\n                if (typeof convertingStatus.errorCode === \"number\") {\n                    const serverRequestError = new ServerRequestError(convertingStatus.errorCode);\n                    serverRequestError.errorMessage = convertingStatus.errorMessage || \"\";\n                    error = serverRequestError;\n                } else {\n                    error = new Error(convertingStatus.errorMessage);\n                }\n                return { status: FileConvertStep.Failed, error };\n            }\n\n            if (convertingStatus.status === \"Finished\") {\n                return { status: FileConvertStep.Done };\n            }\n            return { status: FileConvertStep.Converting };\n        }\n        return { status: FileConvertStep.None };\n    }\n}\n"],"names":["FileConvertNetless","file","convertResult","convertStart","resourceType","whiteboardProjector","whiteboardConvert","taskUUID","taskToken","FileResourceType","convertingStatus","queryConvertingTaskStatus","isPPTX","error","serverRequestError","ServerRequestError","FileConvertStep"],"mappings":"uQAaO,MAAMA,CAAkD,CAC3D,MAAa,aACTC,EAGF,CACQ,MAAAC,EAAgB,MAAMC,EAAa,CACrC,SAAUF,EAAK,QAAA,CAClB,EACK,CAAE,aAAAG,EAAc,oBAAAC,EAAqB,kBAAAC,CAAA,EAAsBJ,EAEjE,GAAIG,EAAqB,CACf,KAAA,CAAE,SAAAE,EAAU,UAAAC,CAAc,EAAAH,EACzB,MAAA,CACH,SAAAE,EACA,UAAAC,EACA,aAAAJ,CAAA,CAER,CAEA,GAAIE,EAAmB,CACb,KAAA,CAAE,SAAAC,EAAU,UAAAC,CAAc,EAAAF,EACzB,MAAA,CACH,SAAAC,EACA,UAAAC,EACA,aAAAJ,CAAA,CAER,CAGJ,CAEA,MAAa,YAAYH,EAAqD,CAC1E,GACIA,EAAK,eAAiBQ,EAAiB,mBACvCR,EAAK,eAAiBQ,EAAiB,oBACzC,CACQ,MAAAC,EAAmB,MAAMC,EAA0B,CACrD,QAASC,EAAOX,EAAK,QAAQ,EAC7B,aAAcA,EAAK,aACnB,KAAMA,EAAK,IAAA,CACd,EAEG,GAAAS,EAAiB,SAAW,OAAQ,CAChC,IAAAG,EACA,GAAA,OAAOH,EAAiB,WAAc,SAAU,CAChD,MAAMI,EAAqB,IAAIC,EAAmBL,EAAiB,SAAS,EACzDI,EAAA,aAAeJ,EAAiB,cAAgB,GAC3DG,EAAAC,CAAA,MAEAD,EAAA,IAAI,MAAMH,EAAiB,YAAY,EAEnD,MAAO,CAAE,OAAQM,EAAgB,OAAQ,MAAAH,CAAM,CACnD,CAEI,OAAAH,EAAiB,SAAW,WACrB,CAAE,OAAQM,EAAgB,MAE9B,CAAE,OAAQA,EAAgB,WACrC,CACO,MAAA,CAAE,OAAQA,EAAgB,KACrC,CACJ"}