import{aR as c,F as u,aS as p,aT as o}from"./index.43c4ffc0.js";import{q as m}from"./courseware-converting.d7d525a3.js";import{q as k}from"./courseware-converting.d7d525a3.js";import{i as v}from"./utils.bf5d20e7.js";import{g as S,i as U}from"./utils.bf5d20e7.js";class C{async startConvert(r){const e=await c({fileUUID:r.fileUUID}),{resourceType:t,whiteboardProjector:s,whiteboardConvert:i}=e;if(s){const{taskUUID:a,taskToken:n}=s;return{taskUUID:a,taskToken:n,resourceType:t}}if(i){const{taskUUID:a,taskToken:n}=i;return{taskUUID:a,taskToken:n,resourceType:t}}}async queryStatus(r){if(r.resourceType===u.WhiteboardConvert||r.resourceType===u.WhiteboardProjector){const e=await m({dynamic:v(r.fileName),resourceType:r.resourceType,meta:r.meta});if(e.status==="Fail"){let t;if(typeof e.errorCode=="number"){const s=new p(e.errorCode);s.errorMessage=e.errorMessage||"",t=s}else t=new Error(e.errorMessage);return{status:o.Failed,error:t}}return e.status==="Finished"?{status:o.Done}:{status:o.Converting}}return{status:o.None}}}export{C as FileConvertNetless,S as getFileExt,U as isPPTX,k as queryConvertingTaskStatus};
//# sourceMappingURL=index.55e24a72.js.map
