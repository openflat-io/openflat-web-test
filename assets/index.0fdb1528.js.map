{"version":3,"file":"index.0fdb1528.js","sources":["../../../../packages/flat-pages/src/BigClassPage/index.tsx"],"sourcesContent":["import \"./BigClassPage.less\";\n\nimport { message } from \"antd\";\nimport {\n    CloudRecordBtn,\n    Timer,\n    NetworkStatus,\n    RoomInfo,\n    TopBar,\n    TopBarDivider,\n    TopBarRightBtn,\n    SVGExit,\n    SVGMenuUnfold,\n    SVGMenuFold,\n    SVGScreenSharing,\n} from \"flat-components\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslate } from \"@netless/flat-i18n\";\nimport { RoomStatus } from \"@netless/flat-server-api\";\nimport { ChatPanel } from \"../components/ChatPanel\";\nimport { RoomStatusStoppedModal } from \"../components/ClassRoom/RoomStatusStoppedModal\";\nimport { CloudStorageButton } from \"../components/CloudStorageButton\";\nimport {\n    ExitRoomConfirm,\n    ExitRoomConfirmType,\n    useExitRoomConfirmModal,\n} from \"../components/ExitRoomConfirm\";\nimport InviteButton from \"../components/InviteButton\";\nimport { RealtimePanel } from \"../components/RealtimePanel\";\nimport { Whiteboard } from \"../components/Whiteboard\";\nimport { RTCAvatar } from \"../components/RTCAvatar\";\nimport { ShareScreen } from \"../components/ShareScreen\";\nimport { useLoginCheck } from \"../utils/use-login-check\";\nimport { withClassroomStore, WithClassroomStoreProps } from \"../utils/with-classroom-store\";\nimport { WindowsSystemBtnContext } from \"../components/StoreProvider\";\nimport { ShareScreenPicker } from \"../components/ShareScreen/ShareScreenPicker\";\nimport { ExtraPadding } from \"../components/ExtraPadding\";\nimport { UsersButton } from \"../components/UsersButton\";\n\nexport type BigClassPageProps = {};\n\nexport const BigClassPage = withClassroomStore<BigClassPageProps>(\n    observer<WithClassroomStoreProps<BigClassPageProps>>(function BigClassPage({ classroomStore }) {\n        useLoginCheck();\n\n        const t = useTranslate();\n\n        const whiteboardStore = classroomStore.whiteboardStore;\n        const windowsBtn = useContext(WindowsSystemBtnContext);\n\n        const { confirm, ...exitConfirmModalProps } = useExitRoomConfirmModal(classroomStore);\n\n        const [isRealtimeSideOpen, openRealtimeSide] = useState(true);\n\n        useEffect(() => {\n            if (classroomStore.isCreator && classroomStore.roomStatus === RoomStatus.Idle) {\n                void classroomStore.startClass();\n            }\n        }, [classroomStore]);\n\n        return (\n            <div className=\"big-class-page-container\">\n                <div className=\"big-class-realtime-container\">\n                    <div className=\"big-class-realtime-box\">\n                        {windowsBtn ? (\n                            <TopBar\n                                left={renderTopBarLeft()}\n                                right={renderTopBarRight()}\n                                showWindowsSystemBtn={windowsBtn.showWindowsBtn}\n                                onClickWindowsSystemBtn={windowsBtn.onClickWindowsSystemBtn}\n                                onDoubleClick={windowsBtn.clickWindowMaximize}\n                            />\n                        ) : (\n                            <TopBar left={renderTopBarLeft()} right={renderTopBarRight()} />\n                        )}\n                        <div className=\"big-class-realtime-content\">\n                            <div className=\"big-class-realtime-content-container\">\n                                <ShareScreen classroomStore={classroomStore} />\n                                <ShareScreenPicker\n                                    classroomStore={classroomStore}\n                                    handleOk={() => classroomStore.toggleShareScreen(true)}\n                                />\n                                <Whiteboard\n                                    classRoomStore={classroomStore}\n                                    whiteboardStore={whiteboardStore}\n                                />\n                            </div>\n                            {renderRealtimePanel()}\n                        </div>\n                        <ExitRoomConfirm\n                            isCreator={classroomStore.isCreator}\n                            {...exitConfirmModalProps}\n                        />\n                        <RoomStatusStoppedModal\n                            isCreator={classroomStore.isCreator}\n                            isRemoteLogin={classroomStore.isRemoteLogin}\n                            roomStatus={classroomStore.roomStatus}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n\n        function renderTopBarLeft(): React.ReactNode {\n            return (\n                <>\n                    <ExtraPadding />\n                    <NetworkStatus networkQuality={classroomStore.networkQuality} />\n                    {classroomStore.isCreator ? (\n                        classroomStore.roomInfo?.beginTime && (\n                            <Timer\n                                beginTime={classroomStore.roomInfo.beginTime}\n                                roomStatus={classroomStore.roomStatus}\n                            />\n                        )\n                    ) : (\n                        <RoomInfo\n                            roomStatus={classroomStore.roomStatus}\n                            roomType={classroomStore.roomInfo?.roomType}\n                        />\n                    )}\n                </>\n            );\n        }\n\n        function renderTopBarRight(): React.ReactNode {\n            return (\n                <>\n                    {whiteboardStore.allowDrawing && !classroomStore.isRemoteScreenSharing && (\n                        <TopBarRightBtn\n                            icon={<SVGScreenSharing active={classroomStore.isScreenSharing} />}\n                            title={t(\"share-screen.self\")}\n                            onClick={() => {\n                                if (window.isElectron) {\n                                    if (classroomStore.isScreenSharing) {\n                                        classroomStore.toggleShareScreen(false);\n                                    } else {\n                                        classroomStore.toggleShareScreenPicker(true);\n                                    }\n                                } else {\n                                    classroomStore.toggleShareScreen();\n                                }\n                            }}\n                        />\n                    )}\n                    {classroomStore.isCreator && (\n                        <CloudRecordBtn\n                            isRecording={classroomStore.isRecording}\n                            loading={classroomStore.isRecordingLoading}\n                            onClick={() => {\n                                void classroomStore.toggleRecording({\n                                    onStop() {\n                                        void message.success(t(\"recording-completed-tips\"));\n                                    },\n                                });\n                            }}\n                        />\n                    )}\n                    {classroomStore.whiteboardStore.allowDrawing && (\n                        <CloudStorageButton classroom={classroomStore} />\n                    )}\n                    <InviteButton roomInfo={classroomStore.roomInfo} />\n                    {/* TODO: open users sub window */}\n                    <UsersButton classroom={classroomStore} />\n                    {!windowsBtn?.showWindowsBtn && (\n                        <TopBarRightBtn\n                            icon={<SVGExit />}\n                            title={t(\"exit\")}\n                            onClick={() => confirm(ExitRoomConfirmType.ExitButton)}\n                        />\n                    )}\n                    {windowsBtn?.showWindowsBtn ? null : <TopBarDivider />}\n                    <TopBarRightBtn\n                        icon={isRealtimeSideOpen ? <SVGMenuUnfold /> : <SVGMenuFold />}\n                        title={isRealtimeSideOpen ? t(\"side-panel.hide\") : t(\"side-panel.show\")}\n                        onClick={handleSideOpenerSwitch}\n                    />\n                    {windowsBtn?.showWindowsBtn && <TopBarDivider />}\n                </>\n            );\n        }\n\n        function renderRealtimePanel(): React.ReactNode {\n            const { creator } = classroomStore.users;\n\n            return (\n                <RealtimePanel\n                    chatSlot={<ChatPanel classRoomStore={classroomStore} />}\n                    isShow={isRealtimeSideOpen}\n                    isVideoOn={classroomStore.isJoinedRTC}\n                    videoSlot={\n                        <div className=\"big-class-realtime-rtc-box\">\n                            <RTCAvatar\n                                avatarUser={creator}\n                                getPortal={classroomStore.getPortal}\n                                isAvatarUserCreator={true}\n                                isCreator={classroomStore.isCreator}\n                                isDropTarget={classroomStore.isDropTarget(classroomStore.ownerUUID)}\n                                rtcAvatar={creator && classroomStore.rtc.getAvatar(creator.rtcUID)}\n                                updateDeviceState={classroomStore.updateDeviceState}\n                                userUUID={classroomStore.userUUID}\n                                onDoubleClick={() =>\n                                    classroomStore.createMaximizedAvatarWindow(\n                                        classroomStore.ownerUUID,\n                                    )\n                                }\n                                onDragEnd={classroomStore.onDragEnd}\n                                onDragStart={classroomStore.onDragStart}\n                            />\n                            {classroomStore.onStageUserUUIDs.length > 0 && (\n                                <RTCAvatar\n                                    avatarUser={classroomStore.firstOnStageUser}\n                                    getPortal={classroomStore.getPortal}\n                                    isAvatarUserCreator={false}\n                                    isCreator={classroomStore.isCreator}\n                                    isDropTarget={\n                                        classroomStore.firstOnStageUser &&\n                                        classroomStore.isDropTarget(\n                                            classroomStore.firstOnStageUser.userUUID,\n                                        )\n                                    }\n                                    rtcAvatar={\n                                        classroomStore.firstOnStageUser &&\n                                        classroomStore.rtc.getAvatar(\n                                            classroomStore.firstOnStageUser.rtcUID,\n                                        )\n                                    }\n                                    updateDeviceState={classroomStore.updateDeviceState}\n                                    userUUID={classroomStore.userUUID}\n                                    onDoubleClick={() =>\n                                        classroomStore.firstOnStageUser &&\n                                        classroomStore.createMaximizedAvatarWindow(\n                                            classroomStore.firstOnStageUser.userUUID,\n                                        )\n                                    }\n                                    onDragEnd={classroomStore.onDragEnd}\n                                    onDragStart={classroomStore.onDragStart}\n                                />\n                            )}\n                        </div>\n                    }\n                />\n            );\n        }\n\n        function handleSideOpenerSwitch(): void {\n            openRealtimeSide(isRealtimeSideOpen => !isRealtimeSideOpen);\n            whiteboardStore.setRightSideClose(isRealtimeSideOpen);\n        }\n    }),\n);\n\nexport default BigClassPage;\n"],"names":["BigClassPage","withClassroomStore","observer","classroomStore","useLoginCheck","t","useTranslate","whiteboardStore","windowsBtn","useContext","WindowsSystemBtnContext","confirm","exitConfirmModalProps","useExitRoomConfirmModal","isRealtimeSideOpen","openRealtimeSide","useState","useEffect","isCreator","roomStatus","RoomStatus","Idle","startClass","_jsx","TopBar","renderTopBarLeft","renderTopBarRight","showWindowsBtn","onClickWindowsSystemBtn","clickWindowMaximize","_jsxs","ShareScreen","ShareScreenPicker","toggleShareScreen","Whiteboard","renderRealtimePanel","ExitRoomConfirm","RoomStatusStoppedModal","isRemoteLogin","_Fragment","ExtraPadding","NetworkStatus","networkQuality","roomInfo","beginTime","Timer","RoomInfo","roomType","allowDrawing","isRemoteScreenSharing","TopBarRightBtn","SVGScreenSharing","isScreenSharing","window","isElectron","toggleShareScreenPicker","CloudRecordBtn","isRecording","isRecordingLoading","toggleRecording","onStop","message","success","CloudStorageButton","InviteButton","UsersButton","SVGExit","ExitRoomConfirmType","ExitButton","TopBarDivider","SVGMenuUnfold","SVGMenuFold","handleSideOpenerSwitch","creator","users","RealtimePanel","ChatPanel","isJoinedRTC","RTCAvatar","getPortal","isDropTarget","ownerUUID","rtc","getAvatar","rtcUID","updateDeviceState","userUUID","createMaximizedAvatarWindow","onDragEnd","onDragStart","onStageUserUUIDs","length","firstOnStageUser","setRightSideClose"],"mappings":"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"}