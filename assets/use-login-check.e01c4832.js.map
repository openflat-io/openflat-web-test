{"version":3,"file":"use-login-check.e01c4832.js","sources":["../../../../packages/flat-pages/src/utils/use-login-check.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { RouteNameType, useReplaceHistory } from \"./routes\";\nimport { GlobalStoreContext } from \"../components/StoreProvider\";\nimport { loginCheck } from \"@netless/flat-server-api\";\nimport { errorTips } from \"flat-components\";\n\nexport function useLoginCheck(): boolean {\n    const replaceHistory = useReplaceHistory();\n    const globalStore = useContext(GlobalStoreContext);\n    const [isLogin, setIsLogin] = useState(false);\n\n    useEffect(() => {\n        let isUnMount = false;\n\n        async function checkLogin(): Promise<boolean> {\n            if (!globalStore.userInfo?.token) {\n                return false;\n            }\n\n            if (globalStore.lastLoginCheck) {\n                if (Date.now() - globalStore.lastLoginCheck < 2 * 60 * 60 * 1000) {\n                    return true;\n                }\n            }\n\n            try {\n                const result = await loginCheck();\n                globalStore.updateUserInfo(result);\n                globalStore.updateLastLoginCheck(Date.now());\n                saveJWTToken(result.token);\n                return process.env.FLAT_REGION === \"CN\" ? result.hasPhone : true;\n            } catch (e) {\n                globalStore.updateLastLoginCheck(null);\n                console.error(e);\n                errorTips(e as Error);\n            }\n\n            return false;\n        }\n\n        void checkLogin().then(isLoggedIn => {\n            if (!isUnMount) {\n                if (isLoggedIn) {\n                    setIsLogin(true);\n                } else {\n                    replaceHistory(RouteNameType.LoginPage);\n                }\n            }\n        });\n\n        return () => {\n            isUnMount = true;\n        };\n        // Only check login once on start\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return isLogin;\n}\n\nexport function saveJWTToken(token: string): void {\n    const maxAge = 60 * 60 * 24 * 29; // 29 days\n    document.cookie = `flatJWTToken=${token}; SameSite=Lax; domain=whiteboard.agora.io; max-age=${maxAge}`;\n}\n"],"names":["useLoginCheck","replaceHistory","useReplaceHistory","globalStore","useContext","GlobalStoreContext","isLogin","setIsLogin","useState","useEffect","isUnMount","checkLogin","userInfo","token","lastLoginCheck","Date","now","result","loginCheck","updateUserInfo","updateLastLoginCheck","saveJWTToken","hasPhone","e","console","error","errorTips","then","isLoggedIn","RouteNameType","LoginPage","cookie","maxAge"],"mappings":"0GAMO,SAASA,GAAyB,CACrC,MAAMC,EAAiBC,IACjBC,EAAcC,qBAAWC,CAAD,EACxB,CAACC,EAASC,CAAV,EAAwBC,mBAAS,EAAD,EAEtCC,OAAAA,EAAAA,QAAAA,UAAU,IAAM,CACZ,IAAIC,EAAY,GAEhB,eAAeC,GAA+B,OACtC,GAAA,GAACR,EAAAA,EAAYS,WAAZT,MAAAA,EAAsBU,OAChB,MAAA,GAGX,GAAIV,EAAYW,gBACRC,KAAKC,MAAQb,EAAYW,eAAiB,EAAI,GAAK,GAAK,IACjD,MAAA,GAIX,GAAA,CACMG,MAAAA,EAAS,MAAMC,IACrBf,OAAAA,EAAYgB,eAAeF,CAA3B,EACYG,EAAAA,qBAAqBL,KAAKC,IAAtC,CAAA,EACAK,EAAaJ,EAAOJ,KAAR,EAC8BI,EAAOK,eAC5CC,GACLpB,EAAYiB,qBAAqB,IAAjC,EACAI,QAAQC,MAAMF,CAAd,EACAG,EAAUH,CAAV,CACH,CAEM,MAAA,EACV,CAEIZ,OAAAA,EAAagB,EAAAA,KAAmBC,GAAA,CAC5BlB,IACGkB,EACArB,EAAW,EAAD,EAEVN,EAAe4B,EAAcC,SAAf,EAErB,CAPA,EAUE,IAAM,CACGpB,EAAA,EAAA,CAInB,EAAE,CA5CM,CAAA,EA8CFJ,CACV,CAEM,SAASe,EAAaR,EAAqB,CAErCkB,SAAAA,OAAU,gBAAelB,wDAA4DmB,SACjG"}